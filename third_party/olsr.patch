diff --git a/Makefile b/Makefile
index 72e92d4..7f975bc 100644
--- a/Makefile
+++ b/Makefile
@@ -219,15 +219,15 @@ rpm:
 
 # This is quite ugly but at least it works
 ifeq ($(OS),linux)
-SUBDIRS := arprefresh bmf dot_draw dyn_gw dyn_gw_plain httpinfo jsoninfo mdns mini nameservice p2pd pgraph pud quagga secure sgwdynspeed txtinfo watchdog
+SUBDIRS := arprefresh bmf dot_draw dyn_gw dyn_gw_plain jsoninfo mdns mini nameservice p2pd pgraph pud quagga secure sgwdynspeed txtinfo watchdog olsrd_qaul
 else
 ifeq ($(OS),win32)
-SUBDIRS := dot_draw httpinfo jsoninfo mini pgraph secure txtinfo
+SUBDIRS := dot_draw httpinfo jsoninfo mini pgraph secure txtinfo olsrd_qaul
 else
 ifeq ($(OS),android)
-SUBDIRS := arprefresh bmf dot_draw dyn_gw dyn_gw_plain httpinfo jsoninfo mdns mini nameservice p2pd pgraph pud secure sgwdynspeed txtinfo watchdog
+SUBDIRS := arprefresh bmf dot_draw dyn_gw dyn_gw_plain httpinfo jsoninfo mdns mini nameservice p2pd pgraph pud secure sgwdynspeed txtinfo watchdog olsrd_qaul
 else
-SUBDIRS := dot_draw httpinfo jsoninfo mini nameservice pgraph secure txtinfo watchdog
+SUBDIRS := dot_draw httpinfo jsoninfo mini nameservice pgraph secure txtinfo watchdog olsrd_qaul
 endif
 endif
 endif
diff --git a/lib/olsrd_qaul/Makefile b/lib/olsrd_qaul/Makefile
new file mode 100644
index 0000000..c894301
--- /dev/null
+++ b/lib/olsrd_qaul/Makefile
@@ -0,0 +1,32 @@
+# 
+# written by contact@wachter-jud.net
+# LICENCE GPL
+#
+
+OLSRD_PLUGIN =	true
+PLUGIN_NAME =	olsrd_qaul
+PLUGIN_VER =	0.1
+
+TOPDIR = ../..
+include $(TOPDIR)/Makefile.inc
+
+ifeq ($(OS),android)
+# On Android Google forgot to include regex engine code for Froyo version (but also there was
+# no support in older versions for it) so we have here this missing code.
+# http://groups.google.com/group/android-ndk/browse_thread/thread/5ea6f0650f0e3fc
+SRCS +=     $(wildcard $(TOPDIR)/android/regex/reg*.c)
+HDRS +=     $(wildcard $(TOPDIR)/android/regex/*.h)
+CFLAGS += -D__POSIX_VISIBLE
+endif
+
+default_target: $(PLUGIN_FULLNAME)
+
+$(PLUGIN_FULLNAME): $(OBJS) version-script.txt
+		$(CC) $(LDFLAGS) -o $(PLUGIN_FULLNAME) $(OBJS) $(LIBS)
+
+install:	$(PLUGIN_FULLNAME)
+		$(STRIP) $(PLUGIN_FULLNAME)
+		$(INSTALL_LIB)
+
+clean:
+		rm -f $(OBJS) $(SRCS:%.c=%.d) $(PLUGIN_FULLNAME)
diff --git a/lib/olsrd_qaul/README_QAUL b/lib/olsrd_qaul/README_QAUL
new file mode 100644
index 0000000..e9332c1
--- /dev/null
+++ b/lib/olsrd_qaul/README_QAUL
@@ -0,0 +1,23 @@
+---------------------------------------------------------------------
+QAUL PLUGIN FOR OLSRD
+---------------------------------------------------------------------
+
+olsrd plugin for qaul
+
+---------------------------------------------------------------------
+PLUGIN PARAMETERS (PlParam)
+---------------------------------------------------------------------
+
+---------------------------------------------------------------------
+SAMPLE CONFIG
+---------------------------------------------------------------------
+
+add to /etc/olsrd.conf:
+
+# LoadPlugin "olsrd_qaul.dll"
+LoadPlugin "olsrd_qaul.so.0.1"
+{
+}
+
+
+---------------------------------------------------------------------
diff --git a/lib/olsrd_qaul/qaul_olsrd_plugin.c b/lib/olsrd_qaul/qaul_olsrd_plugin.c
new file mode 100644
index 0000000..b071127
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_olsrd_plugin.c
@@ -0,0 +1,133 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+ /*
+  * qaul olsrd plugin
+  */
+
+#include <stdio.h>
+#include <string.h>
+
+#include "../../src/olsrd_plugin.h"
+
+#include "qaul_olsrd_plugin.h"
+#include "qaul_msg.h"
+#include "qaul_ipc.h"
+#include "qaul_net.h"
+
+#define PLUGIN_INTERFACE_VERSION 5
+
+// ipc plugin
+int qaul_ipc_port = 8112;
+struct allowed_net *qaul_ipc_allowed_nets = NULL;
+
+
+/****************************************************************************
+ *                Functions that the plugin MUST provide                    *
+ ****************************************************************************/
+
+/**
+ * Plugin interface version
+ * Used by main olsrd to check plugin interface version
+ */
+int
+olsrd_plugin_interface_version(void)
+{
+  return PLUGIN_INTERFACE_VERSION;
+}
+
+static int
+add_plugin_access(const char *value, void *data, set_plugin_parameter_addon addon __attribute__ ((unused)))
+{
+  struct olsr_ip_prefix prefix;
+  struct allowed_net **my_allowed_nets = data;
+  struct allowed_net *an;
+
+  if (olsr_string_to_prefix(olsr_cnf->ip_version, &prefix, value)) {
+    fprintf(stderr, "[QAUL] unknown access restriction parameter: %s!\n", value);
+    exit(0);
+  }
+
+  an = olsr_malloc(sizeof(*an), __func__);
+  if (an == NULL) {
+    fprintf(stderr, "[QAUL] register param net out of memory!\n");
+    exit(0);
+  }
+
+  an->prefix = prefix;
+  an->next = *my_allowed_nets;
+  *my_allowed_nets = an;
+  return 0;
+}
+
+
+
+/**
+ * Register parameters from config file
+ * Called for all plugin parameters
+ */
+// FIXME: is this still needed?
+static const struct olsrd_plugin_parameters plugin_parameters[] = {
+  // ipc params
+  {.name = "qaul_ipc_port",.set_plugin_parameter = &set_plugin_port,.data = &qaul_ipc_port},
+  {.name = "qaul_ipc_host",.set_plugin_parameter = &add_plugin_access,.data = &qaul_ipc_allowed_nets},
+  {.name = "qaul_ipc_net",.set_plugin_parameter = &add_plugin_access,.data = &qaul_ipc_allowed_nets},
+};
+
+void
+olsrd_get_plugin_parameters(const struct olsrd_plugin_parameters **params, int *size)
+{
+  *params = plugin_parameters;
+  *size = sizeof(plugin_parameters) / sizeof(*plugin_parameters);
+}
+
+
+// ------------------------------------------------------------
+// initialize  plugin
+// ------------------------------------------------------------
+
+int
+olsrd_plugin_init(void)
+{
+  // init chat
+  qaul_msg_init();
+
+  // init ipc
+  qaul_ipc_init();
+
+  return 1;
+}
+
+
+
+
+/****************************************************************************
+ *       Optional private constructor and destructor functions              *
+ ****************************************************************************/
+
+/* attention: make static to avoid name clashes */
+
+static void my_init(void) __attribute__ ((constructor));
+static void my_fini(void) __attribute__ ((destructor));
+
+/**
+ * Optional Private Constructor
+ */
+static void
+my_init(void)
+{
+  printf("*** QAUL: constructor\n");
+  setlocale(LC_CTYPE, "de_DE.UTF-8");
+}
+
+/**
+ * Optional Private Destructor
+ */
+static void
+my_fini(void)
+{
+  printf("*** QAUL: destructor\n");
+}
+
diff --git a/lib/olsrd_qaul/qaul_config.h b/lib/olsrd_qaul/qaul_config.h
new file mode 100644
index 0000000..0bd29f8
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_config.h
@@ -0,0 +1,15 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+#ifndef _QAUL_CONFIG
+#define _QAUL_CONFIG
+
+// this is the configuration file for the plugin
+
+//#define VERS05
+
+
+#endif
+
diff --git a/lib/olsrd_qaul/qaul_ipc.h b/lib/olsrd_qaul/qaul_ipc.h
new file mode 100644
index 0000000..2c03def
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_ipc.h
@@ -0,0 +1,39 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+#ifndef _OLSRD_QAUL_IPC
+#define _OLSRD_QAUL_IPC
+
+#include "olsrd_plugin.h"
+#include "plugin_util.h"
+#include "qaul_messages.h"
+
+// ------------------------------------------------------------
+// defines
+
+
+
+// ------------------------------------------------------------
+// structs & variables
+extern int qaul_ipc_port;
+
+
+// ------------------------------------------------------------
+// functions
+int  qaul_ipc_init(void);
+int  qaul_ipc_shutdown(void);
+void qaul_ipc_accept(int fd, void *, unsigned int);
+bool qaul_ipc_check_allowed_ip(const union olsr_ip_addr *addr);
+void qaul_ipc_msg2gui(union olsr_message *m);
+void qaul_ipc_receive(void *foo __attribute__ ((unused)));
+void qaul_ipc_evaluate(union olsr_message *msg);
+void qaul_ipc_evaluate_chat(union olsr_message *msg);
+void Qaullib_IpcEvaluateUserhello(union olsr_message *msg);
+void Qaullib_IpcEvaluateFilediscover(union olsr_message *msg);
+void Qaullib_IpcEvaluateExediscover(union olsr_message *msg);
+void qaul_ipc_evaluate_com(union olsr_message *msg);
+
+
+#endif
diff --git a/lib/olsrd_qaul/qaul_msg.c b/lib/olsrd_qaul/qaul_msg.c
new file mode 100644
index 0000000..dc35751
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_msg.c
@@ -0,0 +1,166 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+#include <olsr_protocol.h>
+#include "net_olsr.h"
+#include "scheduler.h"
+#include "parser.h" // olsr_parser_add
+
+#include "olsrd_plugin.h"
+#include "qaul_config.h"
+#include "qaul_msg.h"
+#include "qaul_msg_LL.h"
+#include "qaul_ipc.h"
+
+// ------------------------------------------------------------
+// variables
+// ------------------------------------------------------------
+int qaul_chat_counter = 0;
+
+
+// ------------------------------------------------------------
+// generic message procession
+// ------------------------------------------------------------
+bool qaul_qaulmsg_parser(union olsr_message *m, struct interface_olsr *in_if __attribute__ ((unused)), union olsr_ip_addr *ipaddr __attribute__ ((unused)))
+{
+	union olsr_ip_addr originator;
+	uint16_t seqno;
+
+	OLSR_PRINTF(1, "[QAUL] qaul_qaulmsg_parser message arrived\n");
+
+	// Fetch the originator & the id of the messsage
+	if (olsr_cnf->ip_version == AF_INET)
+	{
+		OLSR_PRINTF(1, "[QAUL] message type: %i\n", m->v4.olsr_msgtype);
+		memcpy(&originator, &m->v4.originator, olsr_cnf->ipsize);
+		seqno = ntohs(m->v4.seqno);
+	}
+	else
+	{
+		memcpy(&originator, &m->v6.originator, olsr_cnf->ipsize);
+		seqno = ntohs(m->v6.seqno);
+	}
+
+	// Check if message originated from this node
+	if (ipequal(&originator, &olsr_cnf->main_addr))
+		return false;
+
+	// Check for duplicates
+	if (Qaul_Msg_LL_IsDuplicate (seqno, &originator))
+		return false;
+
+	// send it to the qaul application via ipc
+	qaul_ipc_msg2gui(m);
+
+	OLSR_PRINTF(1, "[QAUL] message processed\n");
+
+	// Forward the message
+	return true;
+}
+
+// ------------------------------------------------------------
+void qaul_qaulmsg_send_all(union olsr_message *mymsg)
+{
+	// send buffer: huge
+	char buffer[1024];
+	union olsr_message *message = (union olsr_message *)buffer;
+	struct interface_olsr *ifn;
+	int my_timeout, mysize;
+
+	my_timeout = 30;
+
+	OLSR_PRINTF(1, "[QAUL] qaul_qaulmsg_send_all\n");
+
+	// fill message
+	if (olsr_cnf->ip_version == AF_INET)
+	{
+		// IPv4
+		message->v4.olsr_msgtype = mymsg->v4.olsr_msgtype;
+		message->v4.olsr_vtime = reltime_to_me(my_timeout * MSEC_PER_SEC);
+		memcpy(&message->v4.originator, &olsr_cnf->main_addr, olsr_cnf->ipsize);
+		message->v4.ttl = MAX_TTL;
+		message->v4.hopcnt = 0;
+		message->v4.seqno = htons(get_msg_seqno());
+		mysize = ntohs(mymsg->v4.olsr_msgsize);
+		memcpy(&message->v4.message, &mymsg->v4.message, mysize -sizeof(struct olsrmsg));
+		message->v4.olsr_msgsize = mymsg->v4.olsr_msgsize;
+	}
+	else
+	{
+		// IPv6
+		message->v6.olsr_msgtype = mymsg->v6.olsr_msgtype;
+		message->v6.olsr_vtime = reltime_to_me(my_timeout * MSEC_PER_SEC);
+		memcpy(&message->v6.originator, &olsr_cnf->main_addr, olsr_cnf->ipsize);
+		message->v6.ttl = MAX_TTL;
+		message->v6.hopcnt = 0;
+		message->v6.seqno = htons(get_msg_seqno());
+		mysize = ntohs(mymsg->v6.olsr_msgsize);
+		memcpy(&message->v6.message, &mymsg->v6.message, mysize -sizeof(struct olsrmsg6));
+		message->v6.olsr_msgsize = mymsg->v6.olsr_msgsize;
+	}
+	//looping trough interfaces
+	for (ifn = ifnet; ifn; ifn = ifn->int_next)
+	{
+		OLSR_PRINTF(1, "QAUL: Generating packet - [%s]\n", ifn->int_name);
+
+		if (net_outbuffer_push(ifn, message, mysize) != mysize)
+		{
+			// send data and try again
+			net_output(ifn);
+			if (net_outbuffer_push(ifn, message, mysize) != mysize)
+			{
+				OLSR_PRINTF(1, "QAUL: could not send on interface: %s\n", ifn->int_name);
+			}
+		}
+	}
+}
+
+// ------------------------------------------------------------
+// initialize the system
+// ------------------------------------------------------------
+
+int qaul_msg_init(void)
+{
+	// init linked list
+	Qaul_Msg_LL_Init ();
+
+	// register message parser
+	olsr_parser_add_function(&qaul_qaulmsg_parser, QAUL_CHAT_PARSER_TYPE);
+	olsr_parser_add_function(&qaul_qaulmsg_parser, QAUL_USERHELLO_PARSER_TYPE);
+	olsr_parser_add_function(&qaul_qaulmsg_parser, QAUL_FILEDISCOVER_PARSER_TYPE);
+	olsr_parser_add_function(&qaul_qaulmsg_parser, QAUL_EXEDISCOVER_PARSER_TYPE);
+
+	// schedule message cleaning
+	olsr_start_timer(3 * MSEC_PER_SEC, 0, OLSR_TIMER_PERIODIC, &Qaul_Msg_LL_Clean, NULL, 0);
+
+	// automatically send a chat message every 3 seconds
+	//olsr_start_timer(3 * MSEC_PER_SEC, 0, OLSR_TIMER_PERIODIC, &qaul_chat_autosend, NULL, 0);
+
+	return 1;
+}
+
+
+// ------------------------------------------------------------
+// Test Messages
+// ------------------------------------------------------------
+// Send every 3 seconds a message
+
+/*
+void qaul_chat_autosend(void *foo __attribute__ ((unused)))
+{
+	struct qaul_chat_msg chat_message;
+	//olsr_printf(1, "[QAUL] send test: %i\n", qaul_chat_counter);
+	strcpy(chat_message.name, "[qaul test]");
+	sprintf(chat_message.msg, "%i", qaul_chat_counter);
+	chat_send_all(&chat_message);
+	qaul_chat_counter++;
+	return;
+}
+*/
+
diff --git a/lib/olsrd_qaul/qaul_msg.h b/lib/olsrd_qaul/qaul_msg.h
new file mode 100644
index 0000000..b151af7
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_msg.h
@@ -0,0 +1,24 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+#ifndef _OLSRD_QAUL_CHAT
+#define _OLSRD_QAUL_CHAT
+
+
+#include "olsr.h"
+#include "olsr_types.h"
+#include "link_set.h"
+#include "qaul_messages.h"
+
+
+// -------------------------------------------------------
+int  qaul_msg_init(void);
+void qaul_chat_autosend(void *foo __attribute__ ((unused)));
+
+bool qaul_qaulmsg_parser(union olsr_message *m, struct interface_olsr *in_if __attribute__ ((unused)), union olsr_ip_addr *ipaddr __attribute__ ((unused)));
+void qaul_qaulmsg_send_all(union olsr_message *mymsg);
+
+
+#endif
diff --git a/lib/olsrd_qaul/qaul_msg_LL.c b/lib/olsrd_qaul/qaul_msg_LL.c
new file mode 100644
index 0000000..8327346
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_msg_LL.c
@@ -0,0 +1,117 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+#include <string.h>
+#include "olsr.h"
+
+
+#include "qaul_msg_LL.h"
+
+
+struct qaul_msg_LL_item {
+	struct qaul_msg_LL_item *next;           // next node
+	struct qaul_msg_LL_item *prev;           // previous node
+	union olsr_ip_addr ip;                    // originator address
+	uint16_t           seqno;				  // olsr package sequence number
+	time_t             time;                  // time when first received
+};
+
+void Qaul_Msg_LL_Add (uint16_t seqno, union olsr_ip_addr *ip);
+void Qaul_Msg_LL_Delete_Item (struct qaul_msg_LL_item *item);
+
+
+static int qaul_msg_LL_count;
+static struct qaul_msg_LL_item root_item;
+
+
+void Qaul_Msg_LL_Init (void)
+{
+	qaul_msg_LL_count = 0;
+	root_item.next = &root_item;
+	root_item.prev = &root_item;
+}
+
+int  Qaul_Msg_LL_IsDuplicate (uint16_t seqno, union olsr_ip_addr *ip)
+{
+	struct qaul_msg_LL_item *myitem = &root_item;
+
+	// check if message already exists
+	while(myitem->next != &root_item)
+	{
+		myitem = myitem->next;
+
+		if(myitem->seqno == seqno)
+		{
+			if(memcmp(&myitem->ip, ip, olsr_cnf->ipsize) == 0)
+			{
+				OLSR_PRINTF(1, "item exists\n");
+				return 1;
+			}
+		}
+	}
+
+	// it doesn't exist yet: add it to list
+	Qaul_Msg_LL_Add (seqno, ip);
+
+	return 0;
+}
+
+
+void Qaul_Msg_LL_Add (uint16_t seqno, union olsr_ip_addr *ip)
+{
+	// create new item
+	struct qaul_msg_LL_item *new_item;
+	new_item = (struct qaul_msg_LL_item *)malloc(sizeof(struct qaul_msg_LL_item));
+
+	OLSR_PRINTF(1, "add item\n");
+
+	// fill in content
+	new_item->time = time(NULL);
+	new_item->seqno = seqno;
+	memcpy((char *)&new_item->ip, ip, sizeof(union olsr_ip_addr));
+
+	// create links
+	new_item->prev = &root_item;
+	new_item->next = root_item.next;
+	root_item.next = new_item;
+
+	qaul_msg_LL_count++;
+}
+
+
+void Qaul_Msg_LL_Delete_Item (struct qaul_msg_LL_item *item)
+{
+	OLSR_PRINTF(1, "delete item\n");
+
+	item->prev->next = item->next;
+	item->next->prev = item->prev;
+	qaul_msg_LL_count--;
+
+	free(item);
+}
+
+
+/**
+ * delete all items older than 30 seconds
+ */
+void Qaul_Msg_LL_Clean (void *foo __attribute__ ((unused)))
+{
+	time_t mytime = time(NULL) -30;
+	struct qaul_msg_LL_item *myitem = &root_item;
+
+	while(myitem->prev != &root_item)
+	{
+		myitem = myitem->prev;
+
+		if(myitem->time < mytime)
+			Qaul_Msg_LL_Delete_Item (myitem);
+		else
+			break;
+	}
+}
+
+
+
+
diff --git a/lib/olsrd_qaul/qaul_msg_LL.h b/lib/olsrd_qaul/qaul_msg_LL.h
new file mode 100644
index 0000000..ec62dfb
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_msg_LL.h
@@ -0,0 +1,15 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+#ifndef _QAUL_MSG_LL
+#define _QAUL_MSG_LL
+
+#include "olsr_types.h"
+
+void Qaul_Msg_LL_Init (void);
+int  Qaul_Msg_LL_IsDuplicate (uint16_t seqno, union olsr_ip_addr *ip);
+void Qaul_Msg_LL_Clean (void *foo __attribute__ ((unused)));
+
+#endif
diff --git a/lib/olsrd_qaul/version-script.txt b/lib/olsrd_qaul/version-script.txt
new file mode 100644
index 0000000..a145659
--- /dev/null
+++ b/lib/olsrd_qaul/version-script.txt
@@ -0,0 +1,10 @@
+VERS_1.0
+{
+  global:
+    olsrd_plugin_interface_version;
+    olsrd_plugin_init;
+    olsrd_get_plugin_parameters;
+
+  local:
+    *;
+};
diff --git a/lib/olsrd_qaul/qaul_ipc.c b/lib/olsrd_qaul/qaul_ipc.c
new file mode 100644
index 0000000..970a50b
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_ipc.c
@@ -0,0 +1,399 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+/*
+#include <sys/types.h>
+#include <netinet/in.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <arpa/inet.h>
+#include <signal.h>
+
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <sys/time.h>
+#include <time.h>
+#include <math.h>
+#include <stdio.h>
+#include <string.h>
+
+#include <stdlib.h>
+#include <errno.h>
+#include <stdarg.h>
+*/
+/*
+#ifdef WIN32
+#include <winsock2.h>
+#else
+// manpage says: fd_set is in sys/select.h with posix (at least with the Android-NDK)
+#include <sys/select.h>
+#endif
+
+// OpenBSD wants this here
+#include <sys/types.h>
+#include <sys/socket.h>
+*/
+
+#include "qaul_olsrd_plugin.h"
+
+#include <fcntl.h> // F_GETFL F_SETFL O_NONBLOCK
+#include <unistd.h>
+
+#include "qaul_ipc.h"
+#include "qaul_msg.h"
+#include "qaul_messages.h"
+#include "qaul_net.h"
+
+// ------------------------------------------------------------
+// defines
+#ifdef WIN32
+#define close(x) closesocket(x)
+#define perror(x) WinSockPError(x)
+void WinSockPError(const char *);
+#endif
+
+#ifndef MSG_NOSIGNAL
+#define MSG_NOSIGNAL 0
+#endif
+
+#define QAUL_IPC_PORT 8112
+#define BUFFSIZE 8192
+
+static int ipc_sock = -1;
+static int ipc_conn = -1;
+static int ipc_active = 0;
+/*
+union ipc_inbuf{
+    char buf[BUFFSIZE + 1];
+    union olsr_message msg;
+};
+struct {
+	int size = 0;
+	union ipc_inbuf buf;
+} ipc_inbuf_struct;
+*/
+// ------------------------------------------------------------
+// structs & variables
+union olsr_message *qaul_in_msg;
+
+
+
+// ------------------------------------------------------------
+// outgoing messages
+// ------------------------------------------------------------
+// forward olsr message via ipc socket
+// (smaller footprint, clearer interface)
+
+void qaul_ipc_msg2gui(union olsr_message *m)
+{
+	if(ipc_active)
+	{
+		int size;
+		size = (int) ntohs(m->v4.olsr_msgsize);
+
+		OLSR_PRINTF(1, "[Qaul] Message to gui\n");
+
+		if (send(ipc_conn,(const char *)m, size, MSG_NOSIGNAL) < 0)
+		{
+			OLSR_PRINTF(1, "[Qaul] IPC connection lost!\n");
+			CLOSE(ipc_conn);
+			ipc_active = false;
+		}
+	}
+}
+
+
+// ------------------------------------------------------------
+// incoming messages
+// ------------------------------------------------------------
+
+void qaul_ipc_receive(void *foo __attribute__ ((unused)))
+{
+	int bytes, tmp_len;
+	char *tmp;
+	union {
+	char buf[BUFFSIZE + 1];
+	union olsr_message msg;
+	} inbuf;
+
+
+	if(ipc_active)
+	{
+		memset(&inbuf, 0, sizeof(BUFFSIZE + 1));
+
+		//OLSR_PRINTF(1, "[Qaul] ipc_sock = %i\n", ipc_sock);
+		bytes = recv(ipc_conn, (char *)&inbuf, BUFFSIZE, 0);
+		if (bytes == 0)
+		{
+			OLSR_PRINTF(1, "[Qaul] socket closed\n");
+		}
+		else if(bytes > 0)
+		{
+			tmp = (char *)&inbuf.msg;
+			qaul_in_msg = &inbuf.msg;
+
+			OLSR_PRINTF(1, "[Qaul] received bytes: %i size: %i type: %i\n", bytes, ntohs(inbuf.msg.v4.olsr_msgsize),inbuf.msg.v4.olsr_msgtype);
+
+			// do it as often as needed until all messages are out of the buffer.
+			if (bytes > 0 && ntohs(inbuf.msg.v4.olsr_msgsize) <= bytes)
+			{
+				while (bytes > 0 && ntohs(qaul_in_msg->v4.olsr_msgsize) <= bytes)
+				{
+					OLSR_PRINTF(1, "[Qaul] proceed\n");
+
+					// proceed
+					qaul_ipc_evaluate(qaul_in_msg);
+
+					// copy buffer to new location
+					tmp_len = ntohs(qaul_in_msg->v4.olsr_msgsize);
+					qaul_in_msg = (union olsr_message *)&tmp[tmp_len];
+					tmp = &tmp[tmp_len];
+					if (tmp_len == 0)
+						break;
+					bytes = bytes - tmp_len;
+					tmp_len = ntohs(qaul_in_msg->v4.olsr_msgsize);
+
+					// Copy to start of buffer
+					if (tmp_len > bytes) {
+						// Copy the buffer
+						memcpy(&inbuf, tmp, bytes);
+						bytes = recv(ipc_conn, (char *)&inbuf.buf[bytes], tmp_len - bytes, 0);
+						tmp = (char *)&inbuf.msg;
+						qaul_in_msg = (union olsr_message *)tmp;
+					}
+				}
+			}
+		}
+	}
+}
+
+void qaul_ipc_evaluate(union olsr_message *msg)
+{
+	OLSR_PRINTF(1, "[Qaul] IPC message arrived! Message type: %i\n", msg->v4.olsr_msgtype);
+	switch(msg->v4.olsr_msgtype)
+	{
+		case QAUL_CHAT_MESSAGE_TYPE:
+			OLSR_PRINTF(1, "[QAUL] send chat message\n");
+			qaul_qaulmsg_send_all(msg);
+			break;
+		case QAUL_IPCCOM_MESSAGE_TYPE:
+			OLSR_PRINTF(1, "[QAUL] check topology\n");
+			qaul_ipc_evaluate_com(msg);
+			break;
+		case QAUL_USERHELLO_MESSAGE_TYPE:
+			OLSR_PRINTF(1, "[QAUL] send user hello message\n");
+			qaul_qaulmsg_send_all(msg);
+			break;
+		case QAUL_FILEDISCOVER_MESSAGE_TYPE:
+			OLSR_PRINTF(1, "[QAUL] send file discover message\n");
+			qaul_qaulmsg_send_all(msg);
+			break;
+		case QAUL_EXEDISCOVER_MESSAGE_TYPE:
+			OLSR_PRINTF(1, "[QAUL] send exe discover message\n");
+			qaul_qaulmsg_send_all(msg);
+			break;
+		default:
+			OLSR_PRINTF(1, "not a known message type\n");
+			break;
+	}
+}
+
+void qaul_ipc_evaluate_com(union olsr_message *msg)
+{
+	struct qaul_ipc_msg *ipcCom = ( struct qaul_ipc_msg *)ARM_NOWARN_ALIGN(&msg->v4.message);
+	switch(ipcCom->type)
+	{
+		case QAUL_IPCCOM_QUIT:
+			// exit olsrd
+			OLSR_PRINTF(1, "[Qaul] ipc EXIT command received!\n");
+			olsr_exit("[Qaul] exit message received", EXIT_FAILURE);
+			break;
+		case QAUL_IPCCOM_GETTOPO:
+			OLSR_PRINTF(1, "[Qaul] ipc GET TOPO command received: 1\n");
+			qaul_net_topo2gui();
+			break;
+		case QAUL_IPCCOM_GETMESHTOPO:
+			OLSR_PRINTF(1, "[Qaul] ipc GET MESHTOPO command received: 2\n");
+			qaul_net_meshtopo2gui();
+			break;
+		default:
+			OLSR_PRINTF(1, "[Qaul] not a known ipc command: %i\n", ipcCom->type);
+			break;
+	}
+}
+
+
+// ------------------------------------------------------------
+// ipc connection
+// ------------------------------------------------------------
+
+void qaul_ipc_accept(int fd, void *data __attribute__ ((unused)), unsigned int flags __attribute__ ((unused)))
+{
+#ifdef WIN32
+  int On = 1;
+  unsigned long Len;
+#else
+  //int myflags;
+#endif
+
+  socklen_t addrlen;
+  struct sockaddr_in pin;
+  char *addr;
+
+  addrlen = sizeof(struct sockaddr_in);
+
+  if ((ipc_conn = accept(fd, (struct sockaddr *)&pin, &addrlen)) == -1) {
+    perror("[Qaul] IPC accept");
+    olsr_exit("[Qaul] IPC accept", EXIT_FAILURE);
+  } else {
+    OLSR_PRINTF(1, "[Qaul] Front end connected\n");
+    addr = inet_ntoa(pin.sin_addr);
+    if (qaul_ipc_check_allowed_ip((union olsr_ip_addr *)&pin.sin_addr.s_addr)) {
+        OLSR_PRINTF(1, "[Qaul] Connection from %s\n", addr);
+
+        // make the socket non blocking
+        // Setting socket non-blocking
+#ifdef WIN32
+        if (WSAIoctl(ipc_conn, FIONBIO, &On, sizeof(On), NULL, 0, &Len, NULL, NULL) < 0) {
+          fprintf(stderr, "Error while making socket non-blocking!\n");
+          exit(1);
+        }
+#else
+        if (fcntl(ipc_conn, F_SETFL, flags | O_NONBLOCK) < 0) {
+          fprintf(stderr, "Error setting socket flags!\n");
+          exit(1);
+        }
+#endif
+        ipc_active = true;
+    } else {
+      OLSR_PRINTF(1, "[Qaul] Front end-connection from foregin host(%s) not allowed!\n", addr);
+      OLSR_PRINTF(1, "[Qaul] OLSR: Front end-connection from foregin host(%s) not allowed!\n", addr);
+      CLOSE(ipc_conn);
+    }
+  }
+}
+
+bool qaul_ipc_check_allowed_ip(const union olsr_ip_addr *addr)
+{
+  struct ip_prefix_list *ipcn;
+
+  if (addr->v4.s_addr == ntohl(INADDR_LOOPBACK)) {
+    return true;
+  }
+
+  /* check nets */
+  for (ipcn = olsr_cnf->ipc_nets; ipcn != NULL; ipcn = ipcn->next) {
+    if (ip_in_net(addr, &ipcn->net)) {
+      return true;
+    }
+  }
+
+  return false;
+}
+
+// ------------------------------------------------------------
+// initialize ipc
+// ------------------------------------------------------------
+
+int qaul_ipc_init(void)
+{
+/**/
+#ifdef WIN32
+  int On = 1;
+  unsigned long Len;
+#else
+  int flags;
+#endif
+
+  //int flags;
+  struct sockaddr_in mysin;
+  int port;
+  int yes = 1;
+
+  // Add parser function
+  // would forward all OLSRD Messages to GUI
+  //olsr_parser_add_function(&frontend_msgparser, PROMISCUOUS);
+
+  /* get an internet domain socket */
+  if ((ipc_sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
+    perror("[Qaul] IPC socket");
+    olsr_exit("[Qaul] IPC socket", EXIT_FAILURE);
+  }
+
+  if (setsockopt(ipc_sock, SOL_SOCKET, SO_REUSEADDR, (char *)&yes, sizeof(yes)) < 0) {
+    perror("[Qaul] SO_REUSEADDR failed");
+    return 0;
+  }
+
+  /* complete the socket structure */
+  port = qaul_ipc_port != 0? qaul_ipc_port : QAUL_IPC_PORT;
+  memset(&mysin, 0, sizeof(mysin));
+  mysin.sin_family = AF_INET;
+  mysin.sin_addr.s_addr = INADDR_ANY;
+  mysin.sin_port = htons(port);
+
+  /* bind the socket to the port number */
+  if (bind(ipc_sock, (struct sockaddr *)&mysin, sizeof(mysin)) == -1) {
+    perror("[Qaul] bind IPC error");
+    OLSR_PRINTF(1, "[Qaul] Will retry in 5 seconds...\n");
+    sleep(5);
+    if (bind(ipc_sock, (struct sockaddr *)&mysin, sizeof(mysin)) == -1) {
+      perror("[Qaul] bind IPC error");
+      olsr_exit("[Qaul] exit due to IPC bind error", EXIT_FAILURE);
+    }
+    OLSR_PRINTF(1, "[Qaul] OK\n");
+  }
+
+  // show that we are willing to listen
+  if (listen(ipc_sock, olsr_cnf->ipc_connections) == -1) {
+    perror("[Qaul] IPC listen");
+    olsr_exit("[Qaul] IPC listen", EXIT_FAILURE);
+  }
+
+
+    // Setting socket non-blocking
+#ifdef WIN32
+    if (WSAIoctl(ipc_sock, FIONBIO, &On, sizeof(On), NULL, 0, &Len, NULL, NULL) < 0) {
+      fprintf(stderr, "Error while making socket non-blocking!\n");
+      exit(1);
+    }
+#else
+    if ((flags = fcntl(ipc_sock, F_GETFL, 0)) < 0) {
+      fprintf(stderr, "Error getting socket flags!\n");
+      exit(1);
+    }
+
+    if (fcntl(ipc_sock, F_SETFL, flags | O_NONBLOCK) < 0) {
+      fprintf(stderr, "Error setting socket flags!\n");
+      exit(1);
+    }
+#endif
+/**/
+
+  // Register the socket with the socket parser
+  add_olsr_socket(ipc_sock, &qaul_ipc_accept, NULL, NULL, SP_PR_READ);
+
+	// check for new messages
+	olsr_start_timer(1 * MSEC_PER_SEC, 0, OLSR_TIMER_PERIODIC, &qaul_ipc_receive, NULL, 0);
+
+  //return ipc_sock;
+  return 1;
+}
+
+
+// ------------------------------------------------------------
+// shutdown ipc
+// ------------------------------------------------------------
+int qaul_ipc_shutdown(void)
+{
+  OLSR_PRINTF(1, "[QAUL] Shutting down IPC...\n");
+  CLOSE(ipc_sock);
+  CLOSE(ipc_conn);
+
+  return 1;
+}
+
diff --git a/lib/olsrd_qaul/qaul_messages.h b/lib/olsrd_qaul/qaul_messages.h
new file mode 100644
index 0000000..f3895b3
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_messages.h
@@ -0,0 +1,114 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+#ifndef _OLSRD_QAUL_MESSAGES
+#define _OLSRD_QAUL_MESSAGES
+
+/**
+ * buffer length definition
+ */
+#define MAX_USER_LEN      20
+#define MAX_MESSAGE_LEN  140
+#define MAX_IP_LEN        40
+#define MAX_FILE_LEN      33
+#define MAX_FILENAME_LEN  46
+#define MAX_HASH_LEN      20
+#define MAX_HASHSTR_LEN   40
+#define MAX_SUFFIX_LEN     4
+
+/**
+ * message definitions
+ */
+#define QAUL_CHAT_MESSAGE_TYPE 	        222
+#define QAUL_CHAT_PARSER_TYPE	        QAUL_CHAT_MESSAGE_TYPE
+#define QAUL_IPCCOM_MESSAGE_TYPE        223
+#define QAUL_IPCTOPO_MESSAGE_TYPE       224
+#define QAUL_USERHELLO_MESSAGE_TYPE     225
+#define QAUL_USERHELLO_PARSER_TYPE	    QAUL_USERHELLO_MESSAGE_TYPE
+#define QAUL_FILEDISCOVER_MESSAGE_TYPE  226
+#define QAUL_FILEDISCOVER_PARSER_TYPE   QAUL_FILEDISCOVER_MESSAGE_TYPE
+#define QAUL_FILEAVAILABLE_MESSAGE_TYPE 227
+#define QAUL_FILEAVAILABLE_PARSER_TYPE  QAUL_FILEAVAILABLE_MESSAGE_TYPE
+#define QAUL_EXEDISCOVER_MESSAGE_TYPE   228
+#define QAUL_EXEDISCOVER_PARSER_TYPE    QAUL_EXEDISCOVER_MESSAGE_TYPE
+#define QAUL_EXEAVAILABLE_MESSAGE_TYPE  229
+#define QAUL_EXEAVAILABLE_PARSER_TYPE   QAUL_EXEAVAILABLE_MESSAGE_TYPE
+#define QAUL_IPCMESHTOPO_MESSAGE_TYPE   230
+
+/**
+ * IPC messages
+ */
+#define QAUL_IPCCOM_QUIT                0
+#define QAUL_IPCCOM_GETTOPO             1
+#define QAUL_IPCCOM_GETMESHTOPO         2
+#define QAUL_IPCCOM_MESHTOPO_SENT       3
+
+// message to send
+struct qaul_chat_msg
+{
+	char name[MAX_USER_LEN];
+	char msg[MAX_MESSAGE_LEN];
+};
+
+struct qaul_userhello_msg
+{
+	char name[MAX_USER_LEN];
+	char icon[MAX_HASH_LEN];
+	char suffix[MAX_SUFFIX_LEN];
+};
+
+struct qaul_filediscover_msg
+{
+	char hash[MAX_HASH_LEN];
+};
+
+struct qaul_fileavailable_msg
+{
+	char     hash[MAX_HASH_LEN];
+	char     suffix[MAX_SUFFIX_LEN];
+	uint32_t filesize;
+};
+
+struct qaul_exediscover_msg
+{
+	uint32_t platform;
+};
+
+// todo: cluster exeavailable messages
+struct qaul_exeavailable_msg
+{
+	uint32_t platform;
+	char     hash[MAX_HASH_LEN];
+	char     suffix[MAX_SUFFIX_LEN];
+	uint32_t filesize;
+};
+
+union qaul_ipc
+{
+	int integer;
+};
+
+struct qaul_ipc_msg
+{
+	int type;
+	union qaul_ipc msg;
+};
+
+struct qaul_node_msg
+{
+	union olsr_ip_addr ip;
+	union olsr_ip_addr gateway;
+	uint32_t           lq;
+};
+
+/*
+ * todo: bundle the topo messages together
+struct qaul_topomsg
+{
+	int count;
+	struct qaul_topo topo[];
+};
+*/
+#endif
diff --git a/lib/olsrd_qaul/qaul_net.c b/lib/olsrd_qaul/qaul_net.c
new file mode 100644
index 0000000..c0d885c
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_net.c
@@ -0,0 +1,91 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+#include "tc_set.h"
+
+#include "qaul_net.h"
+#include "qaul_ipc.h"
+
+
+void qaul_net_topo2gui(void)
+{
+	struct tc_entry *tc;
+	union olsr_message *m;
+	char  buffer[512];
+	float linkcost;
+
+	// create new message
+	m = (union olsr_message *)buffer;
+	// fill message
+	m->v4.olsr_msgtype = QAUL_IPCTOPO_MESSAGE_TYPE;
+	m->v4.olsr_msgsize = htons(sizeof(struct qaul_node_msg) + sizeof(struct olsrmsg));
+
+	// loop through the topology and add it to the message
+	OLSR_FOR_ALL_TC_ENTRIES(tc)
+	{
+		struct tc_edge_entry *tc_edge;
+		OLSR_FOR_ALL_TC_EDGE_ENTRIES(tc, tc_edge)
+		{
+		  if (tc_edge->edge_inv)
+		  {
+			  struct qaul_node_msg *node = (struct qaul_node_msg *) &m->v4.message;
+			  // fill the message
+			  linkcost = (float)tc_edge->cost / 1024;
+			  memcpy(&node->ip, &tc_edge->T_dest_addr, sizeof(union olsr_ip_addr));
+			  memcpy(&node->gateway, &tc->addr, sizeof(union olsr_ip_addr));
+			  memcpy(&node->lq, &linkcost, sizeof(uint32_t));
+
+			  // send the message
+			  qaul_ipc_msg2gui(m);
+		  }
+		} OLSR_FOR_ALL_TC_EDGE_ENTRIES_END(tc, tc_edge);
+	} OLSR_FOR_ALL_TC_ENTRIES_END(tc);
+}
+
+
+void qaul_net_meshtopo2gui(void)
+{
+	struct tc_entry *tc;
+	struct tc_edge_entry *tc_edge;
+	union olsr_message *m;
+	char  buffer[512];
+	float linkcost;
+	struct qaul_ipc_msg *ipc_msg;
+
+	// create new message
+	m = (union olsr_message *)buffer;
+	// fill message
+	m->v4.olsr_msgtype = QAUL_IPCMESHTOPO_MESSAGE_TYPE;
+	m->v4.olsr_msgsize = htons(sizeof(struct qaul_node_msg) + sizeof(struct olsrmsg));
+
+	// loop through the topology and add it to the message
+	OLSR_FOR_ALL_TC_ENTRIES(tc)
+	{
+		OLSR_FOR_ALL_TC_EDGE_ENTRIES(tc, tc_edge)
+		{
+		  if (tc_edge->edge_inv)
+		  {
+			  struct qaul_node_msg *node = (struct qaul_node_msg *) &m->v4.message;
+			  // fill the message
+			  linkcost = (float)tc_edge->cost / 1024;
+			  memcpy(&node->ip, &tc->addr, sizeof(union olsr_ip_addr));
+			  memcpy(&node->gateway, &tc_edge->T_dest_addr, sizeof(union olsr_ip_addr));
+			  memcpy(&node->lq, &linkcost, sizeof(uint32_t));
+
+			  // send the message
+			  qaul_ipc_msg2gui(m);
+		  }
+		} OLSR_FOR_ALL_TC_EDGE_ENTRIES_END(tc, tc_edge);
+	} OLSR_FOR_ALL_TC_ENTRIES_END(tc);
+
+	// send finished message
+	ipc_msg = (struct qaul_ipc_msg *) &m->v4.message;
+	m->v4.olsr_msgtype = QAUL_IPCCOM_MESSAGE_TYPE;
+	m->v4.olsr_msgsize = htons(sizeof(struct qaul_ipc_msg) + sizeof(struct olsrmsg));
+	ipc_msg->type = QAUL_IPCCOM_MESHTOPO_SENT;
+	qaul_ipc_msg2gui(m);
+}
+
+
diff --git a/lib/olsrd_qaul/qaul_net.h b/lib/olsrd_qaul/qaul_net.h
new file mode 100644
index 0000000..a9c1664
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_net.h
@@ -0,0 +1,33 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+#ifndef _OLSRD_QAUL_NET
+#define _OLSRD_QAUL_NET
+
+
+#include "olsr.h"
+#include "olsr_types.h"
+#include "link_set.h"
+#include "qaul_messages.h"
+
+/**
+ * network organisation
+ */
+
+
+/**
+ * send network topology information via ipc
+ * for user link quality display
+ */
+void qaul_net_topo2gui(void);
+
+/**
+ * send network topology information via ipc
+ * for mesh network display
+ */
+void qaul_net_meshtopo2gui(void);
+
+
+#endif
diff --git a/lib/olsrd_qaul/qaul_olsrd_plugin.h b/lib/olsrd_qaul/qaul_olsrd_plugin.h
new file mode 100644
index 0000000..f166dff
--- /dev/null
+++ b/lib/olsrd_qaul/qaul_olsrd_plugin.h
@@ -0,0 +1,85 @@
+/*
+ * qaul.net is free software
+ * licensed under GPL (version 3)
+ */
+
+#ifndef _OLSRD_PLUGIN_QAUL
+#define _OLSRD_PLUGIN_QAUL
+
+#include <sys/types.h>
+#include <netinet/in.h>
+#include <sys/socket.h>
+#include <sys/times.h>
+#include <arpa/inet.h>
+#include <sys/time.h>
+#include <time.h>
+#include <math.h>
+#include <locale.h>
+#include <wchar.h>
+
+#include "olsr.h"
+#include "plugin_util.h"
+#include "olsr_types.h"
+#include "neighbor_table.h"
+#include "two_hop_neighbor_table.h"
+#include "tc_set.h"
+#include "hna_set.h"
+#include "mid_set.h"
+#include "mpr_selector_set.h"
+#include "routing_table.h"
+
+
+/**
+ * qaul message types
+ */
+#define QAUL_CHAT_MESSAGE_TYPE 	        222
+#define QAUL_CHAT_PARSER_TYPE	        QAUL_CHAT_MESSAGE_TYPE
+#define QAUL_IPCCOM_MESSAGE_TYPE        223
+#define QAUL_IPCTOPO_MESSAGE_TYPE       224
+#define QAUL_USERHELLO_MESSAGE_TYPE     225
+#define QAUL_USERHELLO_PARSER_TYPE	    QAUL_USERHELLO_MESSAGE_TYPE
+#define QAUL_FILEDISCOVER_MESSAGE_TYPE  226
+#define QAUL_FILEDISCOVER_PARSER_TYPE   QAUL_FILEDISCOVER_MESSAGE_TYPE
+#define QAUL_FILEAVAILABLE_MESSAGE_TYPE 227
+#define QAUL_FILEAVAILABLE_PARSER_TYPE  QAUL_FILEAVAILABLE_MESSAGE_TYPE
+#define QAUL_EXEDISCOVER_MESSAGE_TYPE   228
+#define QAUL_EXEDISCOVER_PARSER_TYPE    QAUL_EXEDISCOVER_MESSAGE_TYPE
+#define QAUL_EXEAVAILABLE_MESSAGE_TYPE  229
+#define QAUL_EXEAVAILABLE_PARSER_TYPE   QAUL_EXEAVAILABLE_MESSAGE_TYPE
+#define QAUL_IPCMESHTOPO_MESSAGE_TYPE   230
+
+/**
+ * IPC messages
+ */
+#define QAUL_IPCCOM_QUIT                0
+#define QAUL_IPCCOM_GETTOPO             1
+#define QAUL_IPCCOM_GETMESHTOPO         2
+#define QAUL_IPCCOM_MESHTOPO_SENT        3
+
+
+#define PLUGIN_NAME    "qaul.net mesh plugin"
+#define PLUGIN_VERSION "0.1"
+#define PLUGIN_AUTHOR  "http://qaul.net project"
+#define MOD_DESC PLUGIN_NAME " " PLUGIN_VERSION " by " PLUGIN_AUTHOR
+#define PLUGIN_INTERFACE_VERSION 5
+
+// global variables
+extern int qaul_ipc_port;
+
+
+struct allowed_net {
+  struct olsr_ip_prefix prefix;
+  struct allowed_net *next;
+};
+
+/****************************************************************************
+ *                Functions that the plugin MUST provide                    *
+ ****************************************************************************/
+
+/* Initialization function */
+int olsrd_plugin_init(void);
+
+int olsrd_plugin_interface_version(void);
+
+#endif
+
