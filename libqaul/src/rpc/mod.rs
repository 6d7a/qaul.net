//! # Process RPC Messages
//! 
//! The RPC messages are defined in the protobuf format.
//! The format is then translated to rust program code.

use prost::Message;

use crate::connections::Connections;
use crate::threaded;
use crate::router::Router;
use crate::node::Node;
use crate::node::user_accounts::UserAccounts;
use crate::feed::Feed;

/// Import protobuf message definition generated by 
/// the rust module prost-build.
pub mod proto { include!("qaul.rpc.rs"); }
use proto::{QaulRpc, Modules};

// alteratively one could import it directly from the target folder
// pub mod rpc_proto {
//     include!(concat!(env!("OUT_DIR"), "/qaul.rpc.rs"));
// }


/// Handling of RPC messages of libqaul
pub struct Rpc {

}


impl Rpc {
    /// Process received binary protobuf encoded RPC message
    /// 
    /// This function will decode the message from the binary
    /// protobuf format to rust structures and send it to 
    /// the module responsible.
    pub fn process_received_message( data: Vec<u8>, connections: &mut Connections ) {
        match QaulRpc::decode(&data[..]) {
            Ok(message) => {
                log::info!("qaul rpc message received");

                match Modules::from_i32(message.module) {
                    Some(Modules::Node) => {
                        Node::rpc(message.data);
                    },
                    Some(Modules::Rpc) => {
                        // TODO: authorisation
                    },
                    Some(Modules::Useraccounts) => {
                        UserAccounts::rpc(message.data);
                    },
                    Some(Modules::Router) => {
                        Router::rpc(message.data);
                    },
                    Some(Modules::Feed) => {
                        Feed::rpc(message.data, message.user_id, connections);
                    },
                    Some(Modules::None) => {},
                    None => {},
                }
            },
            Err(error) => {
                log::error!("{:?}", error);
            },
        }
    }

    /// sends an RPC message to the outside
    pub fn send_message(data: Vec<u8>, module: i32, request_id: String, user_id: Vec<u8>) {
        // Create RPC message container
        let proto_message = proto::QaulRpc {
            module,
            request_id,
            user_id,
            data,
        };

        // encode message
        let mut buf = Vec::with_capacity(proto_message.encoded_len());
        proto_message.encode(&mut buf).expect("Vec<u8> provides capacity as needed");

        // send the message
        threaded::send_rpc_to_extern(buf);
    }
}
