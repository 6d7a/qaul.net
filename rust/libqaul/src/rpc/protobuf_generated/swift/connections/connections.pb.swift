// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: connections/connections.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Connections rpc message container
struct Qaul_Rpc_Connections_Connections {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Qaul_Rpc_Connections_Connections.OneOf_Message? = nil

  var internetNodesRequest: Qaul_Rpc_Connections_InternetNodesRequest {
    get {
      if case .internetNodesRequest(let v)? = message {return v}
      return Qaul_Rpc_Connections_InternetNodesRequest()
    }
    set {message = .internetNodesRequest(newValue)}
  }

  var internetNodesList: Qaul_Rpc_Connections_InternetNodesList {
    get {
      if case .internetNodesList(let v)? = message {return v}
      return Qaul_Rpc_Connections_InternetNodesList()
    }
    set {message = .internetNodesList(newValue)}
  }

  var internetNodesAdd: Qaul_Rpc_Connections_InternetNodesEntry {
    get {
      if case .internetNodesAdd(let v)? = message {return v}
      return Qaul_Rpc_Connections_InternetNodesEntry()
    }
    set {message = .internetNodesAdd(newValue)}
  }

  var internetNodesRemove: Qaul_Rpc_Connections_InternetNodesEntry {
    get {
      if case .internetNodesRemove(let v)? = message {return v}
      return Qaul_Rpc_Connections_InternetNodesEntry()
    }
    set {message = .internetNodesRemove(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable {
    case internetNodesRequest(Qaul_Rpc_Connections_InternetNodesRequest)
    case internetNodesList(Qaul_Rpc_Connections_InternetNodesList)
    case internetNodesAdd(Qaul_Rpc_Connections_InternetNodesEntry)
    case internetNodesRemove(Qaul_Rpc_Connections_InternetNodesEntry)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Rpc_Connections_Connections.OneOf_Message, rhs: Qaul_Rpc_Connections_Connections.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.internetNodesRequest, .internetNodesRequest): return {
        guard case .internetNodesRequest(let l) = lhs, case .internetNodesRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.internetNodesList, .internetNodesList): return {
        guard case .internetNodesList(let l) = lhs, case .internetNodesList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.internetNodesAdd, .internetNodesAdd): return {
        guard case .internetNodesAdd(let l) = lhs, case .internetNodesAdd(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.internetNodesRemove, .internetNodesRemove): return {
        guard case .internetNodesRemove(let l) = lhs, case .internetNodesRemove(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// UI request for Internet nodes list
struct Qaul_Rpc_Connections_InternetNodesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Internet Nodes List
///
/// This is a list of all peer nodes the internet
/// connections module tries to connect to.
struct Qaul_Rpc_Connections_InternetNodesList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nodes: [Qaul_Rpc_Connections_InternetNodesEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Internet Nodes Entry
///
/// Contains a node address as a libp2p multiaddress.
/// e.g. "/ip4/144.91.74.192/tcp/9229"
struct Qaul_Rpc_Connections_InternetNodesEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "qaul.rpc.connections"

extension Qaul_Rpc_Connections_Connections: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Connections"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "internet_nodes_request"),
    2: .standard(proto: "internet_nodes_list"),
    3: .standard(proto: "internet_nodes_add"),
    4: .standard(proto: "internet_nodes_remove"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Qaul_Rpc_Connections_InternetNodesRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .internetNodesRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .internetNodesRequest(v)
        }
      }()
      case 2: try {
        var v: Qaul_Rpc_Connections_InternetNodesList?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .internetNodesList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .internetNodesList(v)
        }
      }()
      case 3: try {
        var v: Qaul_Rpc_Connections_InternetNodesEntry?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .internetNodesAdd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .internetNodesAdd(v)
        }
      }()
      case 4: try {
        var v: Qaul_Rpc_Connections_InternetNodesEntry?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .internetNodesRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .internetNodesRemove(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .internetNodesRequest?: try {
      guard case .internetNodesRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .internetNodesList?: try {
      guard case .internetNodesList(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .internetNodesAdd?: try {
      guard case .internetNodesAdd(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .internetNodesRemove?: try {
      guard case .internetNodesRemove(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Connections_Connections, rhs: Qaul_Rpc_Connections_Connections) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Connections_InternetNodesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InternetNodesRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Connections_InternetNodesRequest, rhs: Qaul_Rpc_Connections_InternetNodesRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Connections_InternetNodesList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InternetNodesList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nodes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.nodes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Connections_InternetNodesList, rhs: Qaul_Rpc_Connections_InternetNodesList) -> Bool {
    if lhs.nodes != rhs.nodes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Connections_InternetNodesEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InternetNodesEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Connections_InternetNodesEntry, rhs: Qaul_Rpc_Connections_InternetNodesEntry) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
