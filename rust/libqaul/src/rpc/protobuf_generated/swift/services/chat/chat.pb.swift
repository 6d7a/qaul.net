// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: services/chat/chat.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Chat service RPC message container
struct Qaul_Rpc_Chat_Chat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// message type
  var message: Qaul_Rpc_Chat_Chat.OneOf_Message? = nil

  /// request an overview over the last conversations
  var overviewRequest: Qaul_Rpc_Chat_ChatOverviewRequest {
    get {
      if case .overviewRequest(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatOverviewRequest()
    }
    set {message = .overviewRequest(newValue)}
  }

  /// contains the overview list
  var overviewList: Qaul_Rpc_Chat_ChatOverviewList {
    get {
      if case .overviewList(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatOverviewList()
    }
    set {message = .overviewList(newValue)}
  }

  /// request a specific conversation
  var conversationRequest: Qaul_Rpc_Chat_ChatConversationRequest {
    get {
      if case .conversationRequest(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatConversationRequest()
    }
    set {message = .conversationRequest(newValue)}
  }

  /// list of a chat conversation
  var conversationList: Qaul_Rpc_Chat_ChatConversationList {
    get {
      if case .conversationList(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatConversationList()
    }
    set {message = .conversationList(newValue)}
  }

  /// send a new chat message
  var send: Qaul_Rpc_Chat_ChatMessageSend {
    get {
      if case .send(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatMessageSend()
    }
    set {message = .send(newValue)}
  }

  /// request a specific conversation
  var chatGroupRequest: Qaul_Rpc_Chat_ChatGroupRequest {
    get {
      if case .chatGroupRequest(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatGroupRequest()
    }
    set {message = .chatGroupRequest(newValue)}
  }

  /// list of a chat conversation
  var chatGroupList: Qaul_Rpc_Chat_ChatGroupList {
    get {
      if case .chatGroupList(let v)? = message {return v}
      return Qaul_Rpc_Chat_ChatGroupList()
    }
    set {message = .chatGroupList(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// message type
  enum OneOf_Message: Equatable {
    /// request an overview over the last conversations
    case overviewRequest(Qaul_Rpc_Chat_ChatOverviewRequest)
    /// contains the overview list
    case overviewList(Qaul_Rpc_Chat_ChatOverviewList)
    /// request a specific conversation
    case conversationRequest(Qaul_Rpc_Chat_ChatConversationRequest)
    /// list of a chat conversation
    case conversationList(Qaul_Rpc_Chat_ChatConversationList)
    /// send a new chat message
    case send(Qaul_Rpc_Chat_ChatMessageSend)
    /// request a specific conversation
    case chatGroupRequest(Qaul_Rpc_Chat_ChatGroupRequest)
    /// list of a chat conversation
    case chatGroupList(Qaul_Rpc_Chat_ChatGroupList)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Rpc_Chat_Chat.OneOf_Message, rhs: Qaul_Rpc_Chat_Chat.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.overviewRequest, .overviewRequest): return {
        guard case .overviewRequest(let l) = lhs, case .overviewRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.overviewList, .overviewList): return {
        guard case .overviewList(let l) = lhs, case .overviewList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.conversationRequest, .conversationRequest): return {
        guard case .conversationRequest(let l) = lhs, case .conversationRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.conversationList, .conversationList): return {
        guard case .conversationList(let l) = lhs, case .conversationList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.send, .send): return {
        guard case .send(let l) = lhs, case .send(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.chatGroupRequest, .chatGroupRequest): return {
        guard case .chatGroupRequest(let l) = lhs, case .chatGroupRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.chatGroupList, .chatGroupList): return {
        guard case .chatGroupList(let l) = lhs, case .chatGroupList(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// request for overview list of all conversations
/// this request shall be sent continuously when the view is open
/// 
/// at the moment always the entire list is sent
struct Qaul_Rpc_Chat_ChatOverviewRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// overview list of conversations
/// this can eighter be the entire list or the last updates
struct Qaul_Rpc_Chat_ChatOverviewList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var overviewList: [Qaul_Rpc_Chat_ChatOverview] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// a chat conversation overview item
struct Qaul_Rpc_Chat_ChatOverview {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id of the user
  var conversationID: Data = Data()

  /// last message index
  var lastMessageIndex: UInt32 = 0

  /// name of the conversation
  var name: String = String()

  /// time when last message was sent or received
  var lastMessageAt: UInt64 = 0

  /// unread messages
  var unread: Int32 = 0

  /// preview text of the last message
  var content: Data = Data()

  /// sender of the last message
  var lastMessageSenderID: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// request messages of a specific chat conversation
struct Qaul_Rpc_Chat_ChatConversationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var conversationID: Data = Data()

  /// send only changes that are newer than the last received
  var lastIndex: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// list of chat messages of a specific conversation
struct Qaul_Rpc_Chat_ChatConversationList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var conversationID: Data = Data()

  var messageList: [Qaul_Rpc_Chat_ChatMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// request messages of a specific group chat conversation
struct Qaul_Rpc_Chat_ChatGroupRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: Data = Data()

  /// send only changes that are newer than the last received
  var lastIndex: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// list of chat messages of a specific group
struct Qaul_Rpc_Chat_ChatGroupList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var groupID: Data = Data()

  var messageList: [Qaul_Rpc_Chat_ChatMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// a single chat message
struct Qaul_Rpc_Chat_ChatMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// message index
  var index: UInt32 = 0

  /// id of the sending user or group_id(group flag case)
  var senderID: Data = Data()

  /// message id or member id
  var messageID: Data = Data()

  /// message status
  /// 0 = nothing
  /// 1 = sent
  /// 2 = received
  var status: UInt32 = 0

  /// group 
  var isGroup: Bool = false

  /// conversation id(group_id)
  var conversationID: Data = Data()

  /// time when the message was sent
  var sentAt: UInt64 = 0

  /// time when the message was received
  var receivedAt: UInt64 = 0

  /// content of the message    
  var content: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// chat message content
struct Qaul_Rpc_Chat_ChatMessageContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var content: Qaul_Rpc_Chat_ChatMessageContent.OneOf_Content? = nil

  /// chat content
  var chatContent: Qaul_Rpc_Chat_ChatContent {
    get {
      if case .chatContent(let v)? = content {return v}
      return Qaul_Rpc_Chat_ChatContent()
    }
    set {content = .chatContent(newValue)}
  }

  /// file sharing content
  var fileContent: Qaul_Rpc_Chat_FileShareContent {
    get {
      if case .fileContent(let v)? = content {return v}
      return Qaul_Rpc_Chat_FileShareContent()
    }
    set {content = .fileContent(newValue)}
  }

  /// group invite content
  var groupInviteContent: Qaul_Rpc_Chat_GroupInviteContent {
    get {
      if case .groupInviteContent(let v)? = content {return v}
      return Qaul_Rpc_Chat_GroupInviteContent()
    }
    set {content = .groupInviteContent(newValue)}
  }

  ///group invite reply content
  var groupInviteReplyContent: Qaul_Rpc_Chat_GroupInviteReplyContent {
    get {
      if case .groupInviteReplyContent(let v)? = content {return v}
      return Qaul_Rpc_Chat_GroupInviteReplyContent()
    }
    set {content = .groupInviteReplyContent(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Content: Equatable {
    /// chat content
    case chatContent(Qaul_Rpc_Chat_ChatContent)
    /// file sharing content
    case fileContent(Qaul_Rpc_Chat_FileShareContent)
    /// group invite content
    case groupInviteContent(Qaul_Rpc_Chat_GroupInviteContent)
    ///group invite reply content
    case groupInviteReplyContent(Qaul_Rpc_Chat_GroupInviteReplyContent)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Rpc_Chat_ChatMessageContent.OneOf_Content, rhs: Qaul_Rpc_Chat_ChatMessageContent.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.chatContent, .chatContent): return {
        guard case .chatContent(let l) = lhs, case .chatContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.fileContent, .fileContent): return {
        guard case .fileContent(let l) = lhs, case .fileContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.groupInviteContent, .groupInviteContent): return {
        guard case .groupInviteContent(let l) = lhs, case .groupInviteContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.groupInviteReplyContent, .groupInviteReplyContent): return {
        guard case .groupInviteReplyContent(let l) = lhs, case .groupInviteReplyContent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

///chat content 
struct Qaul_Rpc_Chat_ChatContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///content
  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///file sharing content
struct Qaul_Rpc_Chat_FileShareContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///file history index in DB
  var historyIndex: UInt64 = 0

  ///file identifier
  var fileID: UInt64 = 0

  ///file name
  var fileName: String = String()

  ///file size
  var fileSize: UInt32 = 0

  ///file description
  var fileDescr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// send chat message
struct Qaul_Rpc_Chat_ChatMessageSend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// conversation id to which this message is sent
  var conversationID: Data = Data()

  /// content of the message
  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///Group invite content
struct Qaul_Rpc_Chat_GroupInviteContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Group Id
  var groupID: Data = Data()

  ///Group name
  var groupName: String = String()

  ///created at
  var createdAt: UInt64 = 0

  ///member count
  var memberCount: UInt32 = 0

  ///admin id
  var adminID: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///Group invite reply content
struct Qaul_Rpc_Chat_GroupInviteReplyContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Group Id
  var groupID: Data = Data()

  ///Accept
  var accept: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "qaul.rpc.chat"

extension Qaul_Rpc_Chat_Chat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "overview_request"),
    2: .standard(proto: "overview_list"),
    3: .standard(proto: "conversation_request"),
    4: .standard(proto: "conversation_list"),
    5: .same(proto: "send"),
    6: .standard(proto: "chat_group_request"),
    7: .standard(proto: "chat_group_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Qaul_Rpc_Chat_ChatOverviewRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .overviewRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .overviewRequest(v)
        }
      }()
      case 2: try {
        var v: Qaul_Rpc_Chat_ChatOverviewList?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .overviewList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .overviewList(v)
        }
      }()
      case 3: try {
        var v: Qaul_Rpc_Chat_ChatConversationRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .conversationRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .conversationRequest(v)
        }
      }()
      case 4: try {
        var v: Qaul_Rpc_Chat_ChatConversationList?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .conversationList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .conversationList(v)
        }
      }()
      case 5: try {
        var v: Qaul_Rpc_Chat_ChatMessageSend?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .send(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .send(v)
        }
      }()
      case 6: try {
        var v: Qaul_Rpc_Chat_ChatGroupRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .chatGroupRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .chatGroupRequest(v)
        }
      }()
      case 7: try {
        var v: Qaul_Rpc_Chat_ChatGroupList?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .chatGroupList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .chatGroupList(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .overviewRequest?: try {
      guard case .overviewRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .overviewList?: try {
      guard case .overviewList(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .conversationRequest?: try {
      guard case .conversationRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .conversationList?: try {
      guard case .conversationList(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .send?: try {
      guard case .send(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .chatGroupRequest?: try {
      guard case .chatGroupRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .chatGroupList?: try {
      guard case .chatGroupList(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_Chat, rhs: Qaul_Rpc_Chat_Chat) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatOverviewRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatOverviewRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatOverviewRequest, rhs: Qaul_Rpc_Chat_ChatOverviewRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatOverviewList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatOverviewList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "overview_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.overviewList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.overviewList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.overviewList, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatOverviewList, rhs: Qaul_Rpc_Chat_ChatOverviewList) -> Bool {
    if lhs.overviewList != rhs.overviewList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatOverview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatOverview"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "conversation_id"),
    2: .standard(proto: "last_message_index"),
    3: .same(proto: "name"),
    4: .standard(proto: "last_message_at"),
    5: .same(proto: "unread"),
    6: .same(proto: "content"),
    7: .standard(proto: "last_message_sender_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.conversationID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.lastMessageIndex) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.lastMessageAt) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.unread) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.lastMessageSenderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.conversationID.isEmpty {
      try visitor.visitSingularBytesField(value: self.conversationID, fieldNumber: 1)
    }
    if self.lastMessageIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.lastMessageIndex, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.lastMessageAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastMessageAt, fieldNumber: 4)
    }
    if self.unread != 0 {
      try visitor.visitSingularInt32Field(value: self.unread, fieldNumber: 5)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 6)
    }
    if !self.lastMessageSenderID.isEmpty {
      try visitor.visitSingularBytesField(value: self.lastMessageSenderID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatOverview, rhs: Qaul_Rpc_Chat_ChatOverview) -> Bool {
    if lhs.conversationID != rhs.conversationID {return false}
    if lhs.lastMessageIndex != rhs.lastMessageIndex {return false}
    if lhs.name != rhs.name {return false}
    if lhs.lastMessageAt != rhs.lastMessageAt {return false}
    if lhs.unread != rhs.unread {return false}
    if lhs.content != rhs.content {return false}
    if lhs.lastMessageSenderID != rhs.lastMessageSenderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatConversationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatConversationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "conversation_id"),
    2: .standard(proto: "last_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.conversationID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lastIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.conversationID.isEmpty {
      try visitor.visitSingularBytesField(value: self.conversationID, fieldNumber: 1)
    }
    if self.lastIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastIndex, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatConversationRequest, rhs: Qaul_Rpc_Chat_ChatConversationRequest) -> Bool {
    if lhs.conversationID != rhs.conversationID {return false}
    if lhs.lastIndex != rhs.lastIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatConversationList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatConversationList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "conversation_id"),
    2: .standard(proto: "message_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.conversationID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.messageList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.conversationID.isEmpty {
      try visitor.visitSingularBytesField(value: self.conversationID, fieldNumber: 1)
    }
    if !self.messageList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messageList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatConversationList, rhs: Qaul_Rpc_Chat_ChatConversationList) -> Bool {
    if lhs.conversationID != rhs.conversationID {return false}
    if lhs.messageList != rhs.messageList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatGroupRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatGroupRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "last_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.lastIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupID.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupID, fieldNumber: 1)
    }
    if self.lastIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastIndex, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatGroupRequest, rhs: Qaul_Rpc_Chat_ChatGroupRequest) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.lastIndex != rhs.lastIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatGroupList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatGroupList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "message_list"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.groupID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.messageList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupID.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupID, fieldNumber: 1)
    }
    if !self.messageList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messageList, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatGroupList, rhs: Qaul_Rpc_Chat_ChatGroupList) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.messageList != rhs.messageList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .standard(proto: "sender_id"),
    3: .standard(proto: "message_id"),
    4: .same(proto: "status"),
    5: .standard(proto: "is_group"),
    6: .standard(proto: "conversation_id"),
    7: .standard(proto: "sent_at"),
    8: .standard(proto: "received_at"),
    9: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.senderID) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.messageID) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.status) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isGroup) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.conversationID) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.sentAt) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.receivedAt) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 1)
    }
    if !self.senderID.isEmpty {
      try visitor.visitSingularBytesField(value: self.senderID, fieldNumber: 2)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularBytesField(value: self.messageID, fieldNumber: 3)
    }
    if self.status != 0 {
      try visitor.visitSingularUInt32Field(value: self.status, fieldNumber: 4)
    }
    if self.isGroup != false {
      try visitor.visitSingularBoolField(value: self.isGroup, fieldNumber: 5)
    }
    if !self.conversationID.isEmpty {
      try visitor.visitSingularBytesField(value: self.conversationID, fieldNumber: 6)
    }
    if self.sentAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.sentAt, fieldNumber: 7)
    }
    if self.receivedAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.receivedAt, fieldNumber: 8)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatMessage, rhs: Qaul_Rpc_Chat_ChatMessage) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.senderID != rhs.senderID {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.isGroup != rhs.isGroup {return false}
    if lhs.conversationID != rhs.conversationID {return false}
    if lhs.sentAt != rhs.sentAt {return false}
    if lhs.receivedAt != rhs.receivedAt {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatMessageContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatMessageContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chat_content"),
    2: .standard(proto: "file_content"),
    3: .standard(proto: "group_invite_content"),
    4: .standard(proto: "group_invite_reply_content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Qaul_Rpc_Chat_ChatContent?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .chatContent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .chatContent(v)
        }
      }()
      case 2: try {
        var v: Qaul_Rpc_Chat_FileShareContent?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .fileContent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .fileContent(v)
        }
      }()
      case 3: try {
        var v: Qaul_Rpc_Chat_GroupInviteContent?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .groupInviteContent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .groupInviteContent(v)
        }
      }()
      case 4: try {
        var v: Qaul_Rpc_Chat_GroupInviteReplyContent?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .groupInviteReplyContent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .groupInviteReplyContent(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.content {
    case .chatContent?: try {
      guard case .chatContent(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .fileContent?: try {
      guard case .fileContent(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .groupInviteContent?: try {
      guard case .groupInviteContent(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .groupInviteReplyContent?: try {
      guard case .groupInviteReplyContent(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatMessageContent, rhs: Qaul_Rpc_Chat_ChatMessageContent) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatContent, rhs: Qaul_Rpc_Chat_ChatContent) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_FileShareContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileShareContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "history_index"),
    2: .standard(proto: "file_id"),
    3: .standard(proto: "file_name"),
    4: .standard(proto: "file_size"),
    5: .standard(proto: "file_descr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.historyIndex) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.fileID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.fileName) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.fileSize) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.fileDescr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.historyIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.historyIndex, fieldNumber: 1)
    }
    if self.fileID != 0 {
      try visitor.visitSingularUInt64Field(value: self.fileID, fieldNumber: 2)
    }
    if !self.fileName.isEmpty {
      try visitor.visitSingularStringField(value: self.fileName, fieldNumber: 3)
    }
    if self.fileSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.fileSize, fieldNumber: 4)
    }
    if !self.fileDescr.isEmpty {
      try visitor.visitSingularStringField(value: self.fileDescr, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_FileShareContent, rhs: Qaul_Rpc_Chat_FileShareContent) -> Bool {
    if lhs.historyIndex != rhs.historyIndex {return false}
    if lhs.fileID != rhs.fileID {return false}
    if lhs.fileName != rhs.fileName {return false}
    if lhs.fileSize != rhs.fileSize {return false}
    if lhs.fileDescr != rhs.fileDescr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_ChatMessageSend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChatMessageSend"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "conversation_id"),
    2: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.conversationID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.conversationID.isEmpty {
      try visitor.visitSingularBytesField(value: self.conversationID, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_ChatMessageSend, rhs: Qaul_Rpc_Chat_ChatMessageSend) -> Bool {
    if lhs.conversationID != rhs.conversationID {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_GroupInviteContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupInviteContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .standard(proto: "group_name"),
    3: .standard(proto: "created_at"),
    4: .standard(proto: "member_count"),
    5: .standard(proto: "admin_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.groupName) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.createdAt) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.memberCount) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.adminID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupID.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupID, fieldNumber: 1)
    }
    if !self.groupName.isEmpty {
      try visitor.visitSingularStringField(value: self.groupName, fieldNumber: 2)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdAt, fieldNumber: 3)
    }
    if self.memberCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.memberCount, fieldNumber: 4)
    }
    if !self.adminID.isEmpty {
      try visitor.visitSingularBytesField(value: self.adminID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_GroupInviteContent, rhs: Qaul_Rpc_Chat_GroupInviteContent) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.groupName != rhs.groupName {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.memberCount != rhs.memberCount {return false}
    if lhs.adminID != rhs.adminID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Chat_GroupInviteReplyContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GroupInviteReplyContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_id"),
    2: .same(proto: "accept"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.groupID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.accept) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.groupID.isEmpty {
      try visitor.visitSingularBytesField(value: self.groupID, fieldNumber: 1)
    }
    if self.accept != false {
      try visitor.visitSingularBoolField(value: self.accept, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Chat_GroupInviteReplyContent, rhs: Qaul_Rpc_Chat_GroupInviteReplyContent) -> Bool {
    if lhs.groupID != rhs.groupID {return false}
    if lhs.accept != rhs.accept {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
