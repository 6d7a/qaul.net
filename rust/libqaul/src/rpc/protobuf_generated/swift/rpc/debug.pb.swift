// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rpc/debug.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Libqaul RPC Debug Messages
struct Qaul_Rpc_Debug_Debug {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// message type
  var message: Qaul_Rpc_Debug_Debug.OneOf_Message? = nil

  /// request a heartbeat
  var heartbeatRequest: Qaul_Rpc_Debug_HeartbeatRequest {
    get {
      if case .heartbeatRequest(let v)? = message {return v}
      return Qaul_Rpc_Debug_HeartbeatRequest()
    }
    set {message = .heartbeatRequest(newValue)}
  }

  /// response to the heartbeat request
  var heartbeatResponse: Qaul_Rpc_Debug_HeartbeatResponse {
    get {
      if case .heartbeatResponse(let v)? = message {return v}
      return Qaul_Rpc_Debug_HeartbeatResponse()
    }
    set {message = .heartbeatResponse(newValue)}
  }

  /// libqaul panics immediatly
  var panic: Qaul_Rpc_Debug_Panic {
    get {
      if case .panic(let v)? = message {return v}
      return Qaul_Rpc_Debug_Panic()
    }
    set {message = .panic(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// message type
  enum OneOf_Message: Equatable {
    /// request a heartbeat
    case heartbeatRequest(Qaul_Rpc_Debug_HeartbeatRequest)
    /// response to the heartbeat request
    case heartbeatResponse(Qaul_Rpc_Debug_HeartbeatResponse)
    /// libqaul panics immediatly
    case panic(Qaul_Rpc_Debug_Panic)

  #if !swift(>=4.1)
    static func ==(lhs: Qaul_Rpc_Debug_Debug.OneOf_Message, rhs: Qaul_Rpc_Debug_Debug.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.heartbeatRequest, .heartbeatRequest): return {
        guard case .heartbeatRequest(let l) = lhs, case .heartbeatRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.heartbeatResponse, .heartbeatResponse): return {
        guard case .heartbeatResponse(let l) = lhs, case .heartbeatResponse(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.panic, .panic): return {
        guard case .panic(let l) = lhs, case .panic(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Request a Heartbeat from Libqaul
///
/// The UI requests regular heartbeats from libqaul,
/// to check if libqaul is still alive
struct Qaul_Rpc_Debug_HeartbeatRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Heartbeat Reply
///
/// Libqaul answers to the heartbeat request
/// with the heartbeat reply answer
struct Qaul_Rpc_Debug_HeartbeatResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Panic
///
/// If libqaul receives this panic message, it
/// throws an error and panics immediatly.
///
/// This message is for debugging only.
struct Qaul_Rpc_Debug_Panic {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "qaul.rpc.debug"

extension Qaul_Rpc_Debug_Debug: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Debug"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "heartbeat_request"),
    2: .standard(proto: "heartbeat_response"),
    3: .same(proto: "panic"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Qaul_Rpc_Debug_HeartbeatRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .heartbeatRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .heartbeatRequest(v)
        }
      }()
      case 2: try {
        var v: Qaul_Rpc_Debug_HeartbeatResponse?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .heartbeatResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .heartbeatResponse(v)
        }
      }()
      case 3: try {
        var v: Qaul_Rpc_Debug_Panic?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .panic(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .panic(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .heartbeatRequest?: try {
      guard case .heartbeatRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .heartbeatResponse?: try {
      guard case .heartbeatResponse(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .panic?: try {
      guard case .panic(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_Debug, rhs: Qaul_Rpc_Debug_Debug) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Debug_HeartbeatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HeartbeatRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_HeartbeatRequest, rhs: Qaul_Rpc_Debug_HeartbeatRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Debug_HeartbeatResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HeartbeatResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_HeartbeatResponse, rhs: Qaul_Rpc_Debug_HeartbeatResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Qaul_Rpc_Debug_Panic: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Panic"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Qaul_Rpc_Debug_Panic, rhs: Qaul_Rpc_Debug_Panic) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
