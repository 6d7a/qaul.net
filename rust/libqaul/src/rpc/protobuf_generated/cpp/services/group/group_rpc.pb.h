// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/group/group_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fgroup_2fgroup_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fgroup_2fgroup_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fgroup_2fgroup_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fgroup_2fgroup_5frpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fgroup_2fgroup_5frpc_2eproto;
namespace qaul {
namespace rpc {
namespace group {
class Group;
struct GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupConversationRequest;
struct GroupConversationRequestDefaultTypeInternal;
extern GroupConversationRequestDefaultTypeInternal _GroupConversationRequest_default_instance_;
class GroupCreateRequest;
struct GroupCreateRequestDefaultTypeInternal;
extern GroupCreateRequestDefaultTypeInternal _GroupCreateRequest_default_instance_;
class GroupCreateResponse;
struct GroupCreateResponseDefaultTypeInternal;
extern GroupCreateResponseDefaultTypeInternal _GroupCreateResponse_default_instance_;
class GroupInfoRequest;
struct GroupInfoRequestDefaultTypeInternal;
extern GroupInfoRequestDefaultTypeInternal _GroupInfoRequest_default_instance_;
class GroupInfoResponse;
struct GroupInfoResponseDefaultTypeInternal;
extern GroupInfoResponseDefaultTypeInternal _GroupInfoResponse_default_instance_;
class GroupInviteMemberRequest;
struct GroupInviteMemberRequestDefaultTypeInternal;
extern GroupInviteMemberRequestDefaultTypeInternal _GroupInviteMemberRequest_default_instance_;
class GroupListRequest;
struct GroupListRequestDefaultTypeInternal;
extern GroupListRequestDefaultTypeInternal _GroupListRequest_default_instance_;
class GroupListResponse;
struct GroupListResponseDefaultTypeInternal;
extern GroupListResponseDefaultTypeInternal _GroupListResponse_default_instance_;
class GroupMember;
struct GroupMemberDefaultTypeInternal;
extern GroupMemberDefaultTypeInternal _GroupMember_default_instance_;
class GroupRemoveMemberRequest;
struct GroupRemoveMemberRequestDefaultTypeInternal;
extern GroupRemoveMemberRequestDefaultTypeInternal _GroupRemoveMemberRequest_default_instance_;
class GroupRenameRequest;
struct GroupRenameRequestDefaultTypeInternal;
extern GroupRenameRequestDefaultTypeInternal _GroupRenameRequest_default_instance_;
class GroupReplyInviteRequest;
struct GroupReplyInviteRequestDefaultTypeInternal;
extern GroupReplyInviteRequestDefaultTypeInternal _GroupReplyInviteRequest_default_instance_;
class GroupSendRequest;
struct GroupSendRequestDefaultTypeInternal;
extern GroupSendRequestDefaultTypeInternal _GroupSendRequest_default_instance_;
}  // namespace group
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> ::qaul::rpc::group::Group* Arena::CreateMaybeMessage<::qaul::rpc::group::Group>(Arena*);
template<> ::qaul::rpc::group::GroupConversationRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupConversationRequest>(Arena*);
template<> ::qaul::rpc::group::GroupCreateRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupCreateRequest>(Arena*);
template<> ::qaul::rpc::group::GroupCreateResponse* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupCreateResponse>(Arena*);
template<> ::qaul::rpc::group::GroupInfoRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupInfoRequest>(Arena*);
template<> ::qaul::rpc::group::GroupInfoResponse* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupInfoResponse>(Arena*);
template<> ::qaul::rpc::group::GroupInviteMemberRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupInviteMemberRequest>(Arena*);
template<> ::qaul::rpc::group::GroupListRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupListRequest>(Arena*);
template<> ::qaul::rpc::group::GroupListResponse* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupListResponse>(Arena*);
template<> ::qaul::rpc::group::GroupMember* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupMember>(Arena*);
template<> ::qaul::rpc::group::GroupRemoveMemberRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupRemoveMemberRequest>(Arena*);
template<> ::qaul::rpc::group::GroupRenameRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupRenameRequest>(Arena*);
template<> ::qaul::rpc::group::GroupReplyInviteRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupReplyInviteRequest>(Arena*);
template<> ::qaul::rpc::group::GroupSendRequest* Arena::CreateMaybeMessage<::qaul::rpc::group::GroupSendRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace qaul {
namespace rpc {
namespace group {

// ===================================================================

class Group final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  ~Group() override;
  explicit PROTOBUF_CONSTEXPR Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Group& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kGroupCreateRequest = 1,
    kGroupCreateResponse = 2,
    kGroupRenameRequest = 3,
    kGroupInviteMemberRequest = 4,
    kGroupRemoveMemberRequest = 5,
    kGroupInfoRequest = 6,
    kGroupInfoResponse = 7,
    kGroupReplyInviteRequest = 8,
    kGroupListRequest = 9,
    kGroupListResponse = 10,
    kGroupSendRequest = 11,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Group& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Group& from) {
    Group::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.Group";
  }
  protected:
  explicit Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupCreateRequestFieldNumber = 1,
    kGroupCreateResponseFieldNumber = 2,
    kGroupRenameRequestFieldNumber = 3,
    kGroupInviteMemberRequestFieldNumber = 4,
    kGroupRemoveMemberRequestFieldNumber = 5,
    kGroupInfoRequestFieldNumber = 6,
    kGroupInfoResponseFieldNumber = 7,
    kGroupReplyInviteRequestFieldNumber = 8,
    kGroupListRequestFieldNumber = 9,
    kGroupListResponseFieldNumber = 10,
    kGroupSendRequestFieldNumber = 11,
  };
  // .qaul.rpc.group.GroupCreateRequest group_create_request = 1;
  bool has_group_create_request() const;
  private:
  bool _internal_has_group_create_request() const;
  public:
  void clear_group_create_request();
  const ::qaul::rpc::group::GroupCreateRequest& group_create_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupCreateRequest* release_group_create_request();
  ::qaul::rpc::group::GroupCreateRequest* mutable_group_create_request();
  void set_allocated_group_create_request(::qaul::rpc::group::GroupCreateRequest* group_create_request);
  private:
  const ::qaul::rpc::group::GroupCreateRequest& _internal_group_create_request() const;
  ::qaul::rpc::group::GroupCreateRequest* _internal_mutable_group_create_request();
  public:
  void unsafe_arena_set_allocated_group_create_request(
      ::qaul::rpc::group::GroupCreateRequest* group_create_request);
  ::qaul::rpc::group::GroupCreateRequest* unsafe_arena_release_group_create_request();

  // .qaul.rpc.group.GroupCreateResponse group_create_response = 2;
  bool has_group_create_response() const;
  private:
  bool _internal_has_group_create_response() const;
  public:
  void clear_group_create_response();
  const ::qaul::rpc::group::GroupCreateResponse& group_create_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupCreateResponse* release_group_create_response();
  ::qaul::rpc::group::GroupCreateResponse* mutable_group_create_response();
  void set_allocated_group_create_response(::qaul::rpc::group::GroupCreateResponse* group_create_response);
  private:
  const ::qaul::rpc::group::GroupCreateResponse& _internal_group_create_response() const;
  ::qaul::rpc::group::GroupCreateResponse* _internal_mutable_group_create_response();
  public:
  void unsafe_arena_set_allocated_group_create_response(
      ::qaul::rpc::group::GroupCreateResponse* group_create_response);
  ::qaul::rpc::group::GroupCreateResponse* unsafe_arena_release_group_create_response();

  // .qaul.rpc.group.GroupRenameRequest group_rename_request = 3;
  bool has_group_rename_request() const;
  private:
  bool _internal_has_group_rename_request() const;
  public:
  void clear_group_rename_request();
  const ::qaul::rpc::group::GroupRenameRequest& group_rename_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupRenameRequest* release_group_rename_request();
  ::qaul::rpc::group::GroupRenameRequest* mutable_group_rename_request();
  void set_allocated_group_rename_request(::qaul::rpc::group::GroupRenameRequest* group_rename_request);
  private:
  const ::qaul::rpc::group::GroupRenameRequest& _internal_group_rename_request() const;
  ::qaul::rpc::group::GroupRenameRequest* _internal_mutable_group_rename_request();
  public:
  void unsafe_arena_set_allocated_group_rename_request(
      ::qaul::rpc::group::GroupRenameRequest* group_rename_request);
  ::qaul::rpc::group::GroupRenameRequest* unsafe_arena_release_group_rename_request();

  // .qaul.rpc.group.GroupInviteMemberRequest group_invite_member_request = 4;
  bool has_group_invite_member_request() const;
  private:
  bool _internal_has_group_invite_member_request() const;
  public:
  void clear_group_invite_member_request();
  const ::qaul::rpc::group::GroupInviteMemberRequest& group_invite_member_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupInviteMemberRequest* release_group_invite_member_request();
  ::qaul::rpc::group::GroupInviteMemberRequest* mutable_group_invite_member_request();
  void set_allocated_group_invite_member_request(::qaul::rpc::group::GroupInviteMemberRequest* group_invite_member_request);
  private:
  const ::qaul::rpc::group::GroupInviteMemberRequest& _internal_group_invite_member_request() const;
  ::qaul::rpc::group::GroupInviteMemberRequest* _internal_mutable_group_invite_member_request();
  public:
  void unsafe_arena_set_allocated_group_invite_member_request(
      ::qaul::rpc::group::GroupInviteMemberRequest* group_invite_member_request);
  ::qaul::rpc::group::GroupInviteMemberRequest* unsafe_arena_release_group_invite_member_request();

  // .qaul.rpc.group.GroupRemoveMemberRequest group_remove_member_request = 5;
  bool has_group_remove_member_request() const;
  private:
  bool _internal_has_group_remove_member_request() const;
  public:
  void clear_group_remove_member_request();
  const ::qaul::rpc::group::GroupRemoveMemberRequest& group_remove_member_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupRemoveMemberRequest* release_group_remove_member_request();
  ::qaul::rpc::group::GroupRemoveMemberRequest* mutable_group_remove_member_request();
  void set_allocated_group_remove_member_request(::qaul::rpc::group::GroupRemoveMemberRequest* group_remove_member_request);
  private:
  const ::qaul::rpc::group::GroupRemoveMemberRequest& _internal_group_remove_member_request() const;
  ::qaul::rpc::group::GroupRemoveMemberRequest* _internal_mutable_group_remove_member_request();
  public:
  void unsafe_arena_set_allocated_group_remove_member_request(
      ::qaul::rpc::group::GroupRemoveMemberRequest* group_remove_member_request);
  ::qaul::rpc::group::GroupRemoveMemberRequest* unsafe_arena_release_group_remove_member_request();

  // .qaul.rpc.group.GroupInfoRequest group_info_request = 6;
  bool has_group_info_request() const;
  private:
  bool _internal_has_group_info_request() const;
  public:
  void clear_group_info_request();
  const ::qaul::rpc::group::GroupInfoRequest& group_info_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupInfoRequest* release_group_info_request();
  ::qaul::rpc::group::GroupInfoRequest* mutable_group_info_request();
  void set_allocated_group_info_request(::qaul::rpc::group::GroupInfoRequest* group_info_request);
  private:
  const ::qaul::rpc::group::GroupInfoRequest& _internal_group_info_request() const;
  ::qaul::rpc::group::GroupInfoRequest* _internal_mutable_group_info_request();
  public:
  void unsafe_arena_set_allocated_group_info_request(
      ::qaul::rpc::group::GroupInfoRequest* group_info_request);
  ::qaul::rpc::group::GroupInfoRequest* unsafe_arena_release_group_info_request();

  // .qaul.rpc.group.GroupInfoResponse group_info_response = 7;
  bool has_group_info_response() const;
  private:
  bool _internal_has_group_info_response() const;
  public:
  void clear_group_info_response();
  const ::qaul::rpc::group::GroupInfoResponse& group_info_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupInfoResponse* release_group_info_response();
  ::qaul::rpc::group::GroupInfoResponse* mutable_group_info_response();
  void set_allocated_group_info_response(::qaul::rpc::group::GroupInfoResponse* group_info_response);
  private:
  const ::qaul::rpc::group::GroupInfoResponse& _internal_group_info_response() const;
  ::qaul::rpc::group::GroupInfoResponse* _internal_mutable_group_info_response();
  public:
  void unsafe_arena_set_allocated_group_info_response(
      ::qaul::rpc::group::GroupInfoResponse* group_info_response);
  ::qaul::rpc::group::GroupInfoResponse* unsafe_arena_release_group_info_response();

  // .qaul.rpc.group.GroupReplyInviteRequest group_reply_invite_request = 8;
  bool has_group_reply_invite_request() const;
  private:
  bool _internal_has_group_reply_invite_request() const;
  public:
  void clear_group_reply_invite_request();
  const ::qaul::rpc::group::GroupReplyInviteRequest& group_reply_invite_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupReplyInviteRequest* release_group_reply_invite_request();
  ::qaul::rpc::group::GroupReplyInviteRequest* mutable_group_reply_invite_request();
  void set_allocated_group_reply_invite_request(::qaul::rpc::group::GroupReplyInviteRequest* group_reply_invite_request);
  private:
  const ::qaul::rpc::group::GroupReplyInviteRequest& _internal_group_reply_invite_request() const;
  ::qaul::rpc::group::GroupReplyInviteRequest* _internal_mutable_group_reply_invite_request();
  public:
  void unsafe_arena_set_allocated_group_reply_invite_request(
      ::qaul::rpc::group::GroupReplyInviteRequest* group_reply_invite_request);
  ::qaul::rpc::group::GroupReplyInviteRequest* unsafe_arena_release_group_reply_invite_request();

  // .qaul.rpc.group.GroupListRequest group_list_request = 9;
  bool has_group_list_request() const;
  private:
  bool _internal_has_group_list_request() const;
  public:
  void clear_group_list_request();
  const ::qaul::rpc::group::GroupListRequest& group_list_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupListRequest* release_group_list_request();
  ::qaul::rpc::group::GroupListRequest* mutable_group_list_request();
  void set_allocated_group_list_request(::qaul::rpc::group::GroupListRequest* group_list_request);
  private:
  const ::qaul::rpc::group::GroupListRequest& _internal_group_list_request() const;
  ::qaul::rpc::group::GroupListRequest* _internal_mutable_group_list_request();
  public:
  void unsafe_arena_set_allocated_group_list_request(
      ::qaul::rpc::group::GroupListRequest* group_list_request);
  ::qaul::rpc::group::GroupListRequest* unsafe_arena_release_group_list_request();

  // .qaul.rpc.group.GroupListResponse group_list_response = 10;
  bool has_group_list_response() const;
  private:
  bool _internal_has_group_list_response() const;
  public:
  void clear_group_list_response();
  const ::qaul::rpc::group::GroupListResponse& group_list_response() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupListResponse* release_group_list_response();
  ::qaul::rpc::group::GroupListResponse* mutable_group_list_response();
  void set_allocated_group_list_response(::qaul::rpc::group::GroupListResponse* group_list_response);
  private:
  const ::qaul::rpc::group::GroupListResponse& _internal_group_list_response() const;
  ::qaul::rpc::group::GroupListResponse* _internal_mutable_group_list_response();
  public:
  void unsafe_arena_set_allocated_group_list_response(
      ::qaul::rpc::group::GroupListResponse* group_list_response);
  ::qaul::rpc::group::GroupListResponse* unsafe_arena_release_group_list_response();

  // .qaul.rpc.group.GroupSendRequest group_send_request = 11;
  bool has_group_send_request() const;
  private:
  bool _internal_has_group_send_request() const;
  public:
  void clear_group_send_request();
  const ::qaul::rpc::group::GroupSendRequest& group_send_request() const;
  PROTOBUF_NODISCARD ::qaul::rpc::group::GroupSendRequest* release_group_send_request();
  ::qaul::rpc::group::GroupSendRequest* mutable_group_send_request();
  void set_allocated_group_send_request(::qaul::rpc::group::GroupSendRequest* group_send_request);
  private:
  const ::qaul::rpc::group::GroupSendRequest& _internal_group_send_request() const;
  ::qaul::rpc::group::GroupSendRequest* _internal_mutable_group_send_request();
  public:
  void unsafe_arena_set_allocated_group_send_request(
      ::qaul::rpc::group::GroupSendRequest* group_send_request);
  ::qaul::rpc::group::GroupSendRequest* unsafe_arena_release_group_send_request();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:qaul.rpc.group.Group)
 private:
  class _Internal;
  void set_has_group_create_request();
  void set_has_group_create_response();
  void set_has_group_rename_request();
  void set_has_group_invite_member_request();
  void set_has_group_remove_member_request();
  void set_has_group_info_request();
  void set_has_group_info_response();
  void set_has_group_reply_invite_request();
  void set_has_group_list_request();
  void set_has_group_list_response();
  void set_has_group_send_request();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::qaul::rpc::group::GroupCreateRequest* group_create_request_;
      ::qaul::rpc::group::GroupCreateResponse* group_create_response_;
      ::qaul::rpc::group::GroupRenameRequest* group_rename_request_;
      ::qaul::rpc::group::GroupInviteMemberRequest* group_invite_member_request_;
      ::qaul::rpc::group::GroupRemoveMemberRequest* group_remove_member_request_;
      ::qaul::rpc::group::GroupInfoRequest* group_info_request_;
      ::qaul::rpc::group::GroupInfoResponse* group_info_response_;
      ::qaul::rpc::group::GroupReplyInviteRequest* group_reply_invite_request_;
      ::qaul::rpc::group::GroupListRequest* group_list_request_;
      ::qaul::rpc::group::GroupListResponse* group_list_response_;
      ::qaul::rpc::group::GroupSendRequest* group_send_request_;
    } message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupCreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupCreateRequest) */ {
 public:
  inline GroupCreateRequest() : GroupCreateRequest(nullptr) {}
  ~GroupCreateRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCreateRequest(const GroupCreateRequest& from);
  GroupCreateRequest(GroupCreateRequest&& from) noexcept
    : GroupCreateRequest() {
    *this = ::std::move(from);
  }

  inline GroupCreateRequest& operator=(const GroupCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCreateRequest& operator=(GroupCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCreateRequest* internal_default_instance() {
    return reinterpret_cast<const GroupCreateRequest*>(
               &_GroupCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupCreateRequest& a, GroupCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupCreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupCreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupCreateRequest& from) {
    GroupCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupCreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupCreateRequest";
  }
  protected:
  explicit GroupCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
  };
  // string group_name = 1;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupCreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupCreateResponse) */ {
 public:
  inline GroupCreateResponse() : GroupCreateResponse(nullptr) {}
  ~GroupCreateResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupCreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupCreateResponse(const GroupCreateResponse& from);
  GroupCreateResponse(GroupCreateResponse&& from) noexcept
    : GroupCreateResponse() {
    *this = ::std::move(from);
  }

  inline GroupCreateResponse& operator=(const GroupCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupCreateResponse& operator=(GroupCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupCreateResponse* internal_default_instance() {
    return reinterpret_cast<const GroupCreateResponse*>(
               &_GroupCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupCreateResponse& a, GroupCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupCreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupCreateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupCreateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupCreateResponse& from) {
    GroupCreateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupCreateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupCreateResponse";
  }
  protected:
  explicit GroupCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // string group_name = 1;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // bytes group_id = 2;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupRenameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupRenameRequest) */ {
 public:
  inline GroupRenameRequest() : GroupRenameRequest(nullptr) {}
  ~GroupRenameRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupRenameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupRenameRequest(const GroupRenameRequest& from);
  GroupRenameRequest(GroupRenameRequest&& from) noexcept
    : GroupRenameRequest() {
    *this = ::std::move(from);
  }

  inline GroupRenameRequest& operator=(const GroupRenameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRenameRequest& operator=(GroupRenameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupRenameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupRenameRequest* internal_default_instance() {
    return reinterpret_cast<const GroupRenameRequest*>(
               &_GroupRenameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupRenameRequest& a, GroupRenameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRenameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRenameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupRenameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupRenameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupRenameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupRenameRequest& from) {
    GroupRenameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRenameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupRenameRequest";
  }
  protected:
  explicit GroupRenameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kGroupNameFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupRenameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupInviteMemberRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupInviteMemberRequest) */ {
 public:
  inline GroupInviteMemberRequest() : GroupInviteMemberRequest(nullptr) {}
  ~GroupInviteMemberRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupInviteMemberRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInviteMemberRequest(const GroupInviteMemberRequest& from);
  GroupInviteMemberRequest(GroupInviteMemberRequest&& from) noexcept
    : GroupInviteMemberRequest() {
    *this = ::std::move(from);
  }

  inline GroupInviteMemberRequest& operator=(const GroupInviteMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInviteMemberRequest& operator=(GroupInviteMemberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInviteMemberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInviteMemberRequest* internal_default_instance() {
    return reinterpret_cast<const GroupInviteMemberRequest*>(
               &_GroupInviteMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroupInviteMemberRequest& a, GroupInviteMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInviteMemberRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInviteMemberRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInviteMemberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInviteMemberRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInviteMemberRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInviteMemberRequest& from) {
    GroupInviteMemberRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInviteMemberRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupInviteMemberRequest";
  }
  protected:
  explicit GroupInviteMemberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // bytes user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupInviteMemberRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupReplyInviteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupReplyInviteRequest) */ {
 public:
  inline GroupReplyInviteRequest() : GroupReplyInviteRequest(nullptr) {}
  ~GroupReplyInviteRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupReplyInviteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupReplyInviteRequest(const GroupReplyInviteRequest& from);
  GroupReplyInviteRequest(GroupReplyInviteRequest&& from) noexcept
    : GroupReplyInviteRequest() {
    *this = ::std::move(from);
  }

  inline GroupReplyInviteRequest& operator=(const GroupReplyInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupReplyInviteRequest& operator=(GroupReplyInviteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupReplyInviteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupReplyInviteRequest* internal_default_instance() {
    return reinterpret_cast<const GroupReplyInviteRequest*>(
               &_GroupReplyInviteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GroupReplyInviteRequest& a, GroupReplyInviteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupReplyInviteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupReplyInviteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupReplyInviteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupReplyInviteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupReplyInviteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupReplyInviteRequest& from) {
    GroupReplyInviteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupReplyInviteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupReplyInviteRequest";
  }
  protected:
  explicit GroupReplyInviteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kAcceptFieldNumber = 3,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // bytes user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bool accept = 3;
  void clear_accept();
  bool accept() const;
  void set_accept(bool value);
  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupReplyInviteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    bool accept_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupRemoveMemberRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupRemoveMemberRequest) */ {
 public:
  inline GroupRemoveMemberRequest() : GroupRemoveMemberRequest(nullptr) {}
  ~GroupRemoveMemberRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupRemoveMemberRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupRemoveMemberRequest(const GroupRemoveMemberRequest& from);
  GroupRemoveMemberRequest(GroupRemoveMemberRequest&& from) noexcept
    : GroupRemoveMemberRequest() {
    *this = ::std::move(from);
  }

  inline GroupRemoveMemberRequest& operator=(const GroupRemoveMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupRemoveMemberRequest& operator=(GroupRemoveMemberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupRemoveMemberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupRemoveMemberRequest* internal_default_instance() {
    return reinterpret_cast<const GroupRemoveMemberRequest*>(
               &_GroupRemoveMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GroupRemoveMemberRequest& a, GroupRemoveMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupRemoveMemberRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupRemoveMemberRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupRemoveMemberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupRemoveMemberRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupRemoveMemberRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupRemoveMemberRequest& from) {
    GroupRemoveMemberRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupRemoveMemberRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupRemoveMemberRequest";
  }
  protected:
  explicit GroupRemoveMemberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // bytes user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupRemoveMemberRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupInfoRequest) */ {
 public:
  inline GroupInfoRequest() : GroupInfoRequest(nullptr) {}
  ~GroupInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInfoRequest(const GroupInfoRequest& from);
  GroupInfoRequest(GroupInfoRequest&& from) noexcept
    : GroupInfoRequest() {
    *this = ::std::move(from);
  }

  inline GroupInfoRequest& operator=(const GroupInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfoRequest& operator=(GroupInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GroupInfoRequest*>(
               &_GroupInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GroupInfoRequest& a, GroupInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInfoRequest& from) {
    GroupInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupInfoRequest";
  }
  protected:
  explicit GroupInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupMember) */ {
 public:
  inline GroupMember() : GroupMember(nullptr) {}
  ~GroupMember() override;
  explicit PROTOBUF_CONSTEXPR GroupMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMember(const GroupMember& from);
  GroupMember(GroupMember&& from) noexcept
    : GroupMember() {
    *this = ::std::move(from);
  }

  inline GroupMember& operator=(const GroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMember& operator=(GroupMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMember* internal_default_instance() {
    return reinterpret_cast<const GroupMember*>(
               &_GroupMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupMember& a, GroupMember& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMember& from) {
    GroupMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupMember";
  }
  protected:
  explicit GroupMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kJoinedAtFieldNumber = 3,
    kRoleFieldNumber = 2,
    kStateFieldNumber = 4,
  };
  // bytes user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // uint64 joined_at = 3;
  void clear_joined_at();
  uint64_t joined_at() const;
  void set_joined_at(uint64_t value);
  private:
  uint64_t _internal_joined_at() const;
  void _internal_set_joined_at(uint64_t value);
  public:

  // uint32 role = 2;
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // uint32 state = 4;
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    uint64_t joined_at_;
    uint32_t role_;
    uint32_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupInfoResponse) */ {
 public:
  inline GroupInfoResponse() : GroupInfoResponse(nullptr) {}
  ~GroupInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInfoResponse(const GroupInfoResponse& from);
  GroupInfoResponse(GroupInfoResponse&& from) noexcept
    : GroupInfoResponse() {
    *this = ::std::move(from);
  }

  inline GroupInfoResponse& operator=(const GroupInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfoResponse& operator=(GroupInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GroupInfoResponse*>(
               &_GroupInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GroupInfoResponse& a, GroupInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInfoResponse& from) {
    GroupInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupInfoResponse";
  }
  protected:
  explicit GroupInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 4,
    kGroupIdFieldNumber = 1,
    kGroupNameFieldNumber = 2,
    kCreatedAtFieldNumber = 3,
  };
  // repeated .qaul.rpc.group.GroupMember members = 4;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::qaul::rpc::group::GroupMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupMember >*
      mutable_members();
  private:
  const ::qaul::rpc::group::GroupMember& _internal_members(int index) const;
  ::qaul::rpc::group::GroupMember* _internal_add_members();
  public:
  const ::qaul::rpc::group::GroupMember& members(int index) const;
  ::qaul::rpc::group::GroupMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupMember >&
      members() const;

  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // uint64 created_at = 3;
  void clear_created_at();
  uint64_t created_at() const;
  void set_created_at(uint64_t value);
  private:
  uint64_t _internal_created_at() const;
  void _internal_set_created_at(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupMember > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    uint64_t created_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupListRequest) */ {
 public:
  inline GroupListRequest() : GroupListRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GroupListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupListRequest(const GroupListRequest& from);
  GroupListRequest(GroupListRequest&& from) noexcept
    : GroupListRequest() {
    *this = ::std::move(from);
  }

  inline GroupListRequest& operator=(const GroupListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupListRequest& operator=(GroupListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupListRequest* internal_default_instance() {
    return reinterpret_cast<const GroupListRequest*>(
               &_GroupListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GroupListRequest& a, GroupListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GroupListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GroupListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupListRequest";
  }
  protected:
  explicit GroupListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupListResponse) */ {
 public:
  inline GroupListResponse() : GroupListResponse(nullptr) {}
  ~GroupListResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupListResponse(const GroupListResponse& from);
  GroupListResponse(GroupListResponse&& from) noexcept
    : GroupListResponse() {
    *this = ::std::move(from);
  }

  inline GroupListResponse& operator=(const GroupListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupListResponse& operator=(GroupListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupListResponse* internal_default_instance() {
    return reinterpret_cast<const GroupListResponse*>(
               &_GroupListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GroupListResponse& a, GroupListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupListResponse& from) {
    GroupListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupListResponse";
  }
  protected:
  explicit GroupListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .qaul.rpc.group.GroupInfoResponse groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::qaul::rpc::group::GroupInfoResponse* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInfoResponse >*
      mutable_groups();
  private:
  const ::qaul::rpc::group::GroupInfoResponse& _internal_groups(int index) const;
  ::qaul::rpc::group::GroupInfoResponse* _internal_add_groups();
  public:
  const ::qaul::rpc::group::GroupInfoResponse& groups(int index) const;
  ::qaul::rpc::group::GroupInfoResponse* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInfoResponse >&
      groups() const;

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInfoResponse > groups_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupSendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupSendRequest) */ {
 public:
  inline GroupSendRequest() : GroupSendRequest(nullptr) {}
  ~GroupSendRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupSendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupSendRequest(const GroupSendRequest& from);
  GroupSendRequest(GroupSendRequest&& from) noexcept
    : GroupSendRequest() {
    *this = ::std::move(from);
  }

  inline GroupSendRequest& operator=(const GroupSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupSendRequest& operator=(GroupSendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupSendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupSendRequest* internal_default_instance() {
    return reinterpret_cast<const GroupSendRequest*>(
               &_GroupSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GroupSendRequest& a, GroupSendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupSendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupSendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupSendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupSendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupSendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupSendRequest& from) {
    GroupSendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupSendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupSendRequest";
  }
  protected:
  explicit GroupSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupSendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// -------------------------------------------------------------------

class GroupConversationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:qaul.rpc.group.GroupConversationRequest) */ {
 public:
  inline GroupConversationRequest() : GroupConversationRequest(nullptr) {}
  ~GroupConversationRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupConversationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupConversationRequest(const GroupConversationRequest& from);
  GroupConversationRequest(GroupConversationRequest&& from) noexcept
    : GroupConversationRequest() {
    *this = ::std::move(from);
  }

  inline GroupConversationRequest& operator=(const GroupConversationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupConversationRequest& operator=(GroupConversationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupConversationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupConversationRequest* internal_default_instance() {
    return reinterpret_cast<const GroupConversationRequest*>(
               &_GroupConversationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GroupConversationRequest& a, GroupConversationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupConversationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupConversationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupConversationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupConversationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupConversationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupConversationRequest& from) {
    GroupConversationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupConversationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "qaul.rpc.group.GroupConversationRequest";
  }
  protected:
  explicit GroupConversationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // bytes group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_id();
  PROTOBUF_NODISCARD std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:qaul.rpc.group.GroupConversationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fgroup_2fgroup_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Group

// .qaul.rpc.group.GroupCreateRequest group_create_request = 1;
inline bool Group::_internal_has_group_create_request() const {
  return message_case() == kGroupCreateRequest;
}
inline bool Group::has_group_create_request() const {
  return _internal_has_group_create_request();
}
inline void Group::set_has_group_create_request() {
  _impl_._oneof_case_[0] = kGroupCreateRequest;
}
inline void Group::clear_group_create_request() {
  if (_internal_has_group_create_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_create_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupCreateRequest* Group::release_group_create_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_create_request)
  if (_internal_has_group_create_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupCreateRequest* temp = _impl_.message_.group_create_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_create_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupCreateRequest& Group::_internal_group_create_request() const {
  return _internal_has_group_create_request()
      ? *_impl_.message_.group_create_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupCreateRequest&>(::qaul::rpc::group::_GroupCreateRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupCreateRequest& Group::group_create_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_create_request)
  return _internal_group_create_request();
}
inline ::qaul::rpc::group::GroupCreateRequest* Group::unsafe_arena_release_group_create_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_create_request)
  if (_internal_has_group_create_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupCreateRequest* temp = _impl_.message_.group_create_request_;
    _impl_.message_.group_create_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_create_request(::qaul::rpc::group::GroupCreateRequest* group_create_request) {
  clear_message();
  if (group_create_request) {
    set_has_group_create_request();
    _impl_.message_.group_create_request_ = group_create_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_create_request)
}
inline ::qaul::rpc::group::GroupCreateRequest* Group::_internal_mutable_group_create_request() {
  if (!_internal_has_group_create_request()) {
    clear_message();
    set_has_group_create_request();
    _impl_.message_.group_create_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupCreateRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_create_request_;
}
inline ::qaul::rpc::group::GroupCreateRequest* Group::mutable_group_create_request() {
  ::qaul::rpc::group::GroupCreateRequest* _msg = _internal_mutable_group_create_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_create_request)
  return _msg;
}

// .qaul.rpc.group.GroupCreateResponse group_create_response = 2;
inline bool Group::_internal_has_group_create_response() const {
  return message_case() == kGroupCreateResponse;
}
inline bool Group::has_group_create_response() const {
  return _internal_has_group_create_response();
}
inline void Group::set_has_group_create_response() {
  _impl_._oneof_case_[0] = kGroupCreateResponse;
}
inline void Group::clear_group_create_response() {
  if (_internal_has_group_create_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_create_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupCreateResponse* Group::release_group_create_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_create_response)
  if (_internal_has_group_create_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupCreateResponse* temp = _impl_.message_.group_create_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_create_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupCreateResponse& Group::_internal_group_create_response() const {
  return _internal_has_group_create_response()
      ? *_impl_.message_.group_create_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupCreateResponse&>(::qaul::rpc::group::_GroupCreateResponse_default_instance_);
}
inline const ::qaul::rpc::group::GroupCreateResponse& Group::group_create_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_create_response)
  return _internal_group_create_response();
}
inline ::qaul::rpc::group::GroupCreateResponse* Group::unsafe_arena_release_group_create_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_create_response)
  if (_internal_has_group_create_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupCreateResponse* temp = _impl_.message_.group_create_response_;
    _impl_.message_.group_create_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_create_response(::qaul::rpc::group::GroupCreateResponse* group_create_response) {
  clear_message();
  if (group_create_response) {
    set_has_group_create_response();
    _impl_.message_.group_create_response_ = group_create_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_create_response)
}
inline ::qaul::rpc::group::GroupCreateResponse* Group::_internal_mutable_group_create_response() {
  if (!_internal_has_group_create_response()) {
    clear_message();
    set_has_group_create_response();
    _impl_.message_.group_create_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupCreateResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.group_create_response_;
}
inline ::qaul::rpc::group::GroupCreateResponse* Group::mutable_group_create_response() {
  ::qaul::rpc::group::GroupCreateResponse* _msg = _internal_mutable_group_create_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_create_response)
  return _msg;
}

// .qaul.rpc.group.GroupRenameRequest group_rename_request = 3;
inline bool Group::_internal_has_group_rename_request() const {
  return message_case() == kGroupRenameRequest;
}
inline bool Group::has_group_rename_request() const {
  return _internal_has_group_rename_request();
}
inline void Group::set_has_group_rename_request() {
  _impl_._oneof_case_[0] = kGroupRenameRequest;
}
inline void Group::clear_group_rename_request() {
  if (_internal_has_group_rename_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_rename_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupRenameRequest* Group::release_group_rename_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_rename_request)
  if (_internal_has_group_rename_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRenameRequest* temp = _impl_.message_.group_rename_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_rename_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupRenameRequest& Group::_internal_group_rename_request() const {
  return _internal_has_group_rename_request()
      ? *_impl_.message_.group_rename_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupRenameRequest&>(::qaul::rpc::group::_GroupRenameRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupRenameRequest& Group::group_rename_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_rename_request)
  return _internal_group_rename_request();
}
inline ::qaul::rpc::group::GroupRenameRequest* Group::unsafe_arena_release_group_rename_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_rename_request)
  if (_internal_has_group_rename_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRenameRequest* temp = _impl_.message_.group_rename_request_;
    _impl_.message_.group_rename_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_rename_request(::qaul::rpc::group::GroupRenameRequest* group_rename_request) {
  clear_message();
  if (group_rename_request) {
    set_has_group_rename_request();
    _impl_.message_.group_rename_request_ = group_rename_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_rename_request)
}
inline ::qaul::rpc::group::GroupRenameRequest* Group::_internal_mutable_group_rename_request() {
  if (!_internal_has_group_rename_request()) {
    clear_message();
    set_has_group_rename_request();
    _impl_.message_.group_rename_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupRenameRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_rename_request_;
}
inline ::qaul::rpc::group::GroupRenameRequest* Group::mutable_group_rename_request() {
  ::qaul::rpc::group::GroupRenameRequest* _msg = _internal_mutable_group_rename_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_rename_request)
  return _msg;
}

// .qaul.rpc.group.GroupInviteMemberRequest group_invite_member_request = 4;
inline bool Group::_internal_has_group_invite_member_request() const {
  return message_case() == kGroupInviteMemberRequest;
}
inline bool Group::has_group_invite_member_request() const {
  return _internal_has_group_invite_member_request();
}
inline void Group::set_has_group_invite_member_request() {
  _impl_._oneof_case_[0] = kGroupInviteMemberRequest;
}
inline void Group::clear_group_invite_member_request() {
  if (_internal_has_group_invite_member_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_invite_member_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupInviteMemberRequest* Group::release_group_invite_member_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_invite_member_request)
  if (_internal_has_group_invite_member_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInviteMemberRequest* temp = _impl_.message_.group_invite_member_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_invite_member_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupInviteMemberRequest& Group::_internal_group_invite_member_request() const {
  return _internal_has_group_invite_member_request()
      ? *_impl_.message_.group_invite_member_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupInviteMemberRequest&>(::qaul::rpc::group::_GroupInviteMemberRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupInviteMemberRequest& Group::group_invite_member_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_invite_member_request)
  return _internal_group_invite_member_request();
}
inline ::qaul::rpc::group::GroupInviteMemberRequest* Group::unsafe_arena_release_group_invite_member_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_invite_member_request)
  if (_internal_has_group_invite_member_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInviteMemberRequest* temp = _impl_.message_.group_invite_member_request_;
    _impl_.message_.group_invite_member_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_invite_member_request(::qaul::rpc::group::GroupInviteMemberRequest* group_invite_member_request) {
  clear_message();
  if (group_invite_member_request) {
    set_has_group_invite_member_request();
    _impl_.message_.group_invite_member_request_ = group_invite_member_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_invite_member_request)
}
inline ::qaul::rpc::group::GroupInviteMemberRequest* Group::_internal_mutable_group_invite_member_request() {
  if (!_internal_has_group_invite_member_request()) {
    clear_message();
    set_has_group_invite_member_request();
    _impl_.message_.group_invite_member_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupInviteMemberRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_invite_member_request_;
}
inline ::qaul::rpc::group::GroupInviteMemberRequest* Group::mutable_group_invite_member_request() {
  ::qaul::rpc::group::GroupInviteMemberRequest* _msg = _internal_mutable_group_invite_member_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_invite_member_request)
  return _msg;
}

// .qaul.rpc.group.GroupRemoveMemberRequest group_remove_member_request = 5;
inline bool Group::_internal_has_group_remove_member_request() const {
  return message_case() == kGroupRemoveMemberRequest;
}
inline bool Group::has_group_remove_member_request() const {
  return _internal_has_group_remove_member_request();
}
inline void Group::set_has_group_remove_member_request() {
  _impl_._oneof_case_[0] = kGroupRemoveMemberRequest;
}
inline void Group::clear_group_remove_member_request() {
  if (_internal_has_group_remove_member_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_remove_member_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupRemoveMemberRequest* Group::release_group_remove_member_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_remove_member_request)
  if (_internal_has_group_remove_member_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRemoveMemberRequest* temp = _impl_.message_.group_remove_member_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_remove_member_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupRemoveMemberRequest& Group::_internal_group_remove_member_request() const {
  return _internal_has_group_remove_member_request()
      ? *_impl_.message_.group_remove_member_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupRemoveMemberRequest&>(::qaul::rpc::group::_GroupRemoveMemberRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupRemoveMemberRequest& Group::group_remove_member_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_remove_member_request)
  return _internal_group_remove_member_request();
}
inline ::qaul::rpc::group::GroupRemoveMemberRequest* Group::unsafe_arena_release_group_remove_member_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_remove_member_request)
  if (_internal_has_group_remove_member_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupRemoveMemberRequest* temp = _impl_.message_.group_remove_member_request_;
    _impl_.message_.group_remove_member_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_remove_member_request(::qaul::rpc::group::GroupRemoveMemberRequest* group_remove_member_request) {
  clear_message();
  if (group_remove_member_request) {
    set_has_group_remove_member_request();
    _impl_.message_.group_remove_member_request_ = group_remove_member_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_remove_member_request)
}
inline ::qaul::rpc::group::GroupRemoveMemberRequest* Group::_internal_mutable_group_remove_member_request() {
  if (!_internal_has_group_remove_member_request()) {
    clear_message();
    set_has_group_remove_member_request();
    _impl_.message_.group_remove_member_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupRemoveMemberRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_remove_member_request_;
}
inline ::qaul::rpc::group::GroupRemoveMemberRequest* Group::mutable_group_remove_member_request() {
  ::qaul::rpc::group::GroupRemoveMemberRequest* _msg = _internal_mutable_group_remove_member_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_remove_member_request)
  return _msg;
}

// .qaul.rpc.group.GroupInfoRequest group_info_request = 6;
inline bool Group::_internal_has_group_info_request() const {
  return message_case() == kGroupInfoRequest;
}
inline bool Group::has_group_info_request() const {
  return _internal_has_group_info_request();
}
inline void Group::set_has_group_info_request() {
  _impl_._oneof_case_[0] = kGroupInfoRequest;
}
inline void Group::clear_group_info_request() {
  if (_internal_has_group_info_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_info_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupInfoRequest* Group::release_group_info_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_info_request)
  if (_internal_has_group_info_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInfoRequest* temp = _impl_.message_.group_info_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupInfoRequest& Group::_internal_group_info_request() const {
  return _internal_has_group_info_request()
      ? *_impl_.message_.group_info_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupInfoRequest&>(::qaul::rpc::group::_GroupInfoRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupInfoRequest& Group::group_info_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_info_request)
  return _internal_group_info_request();
}
inline ::qaul::rpc::group::GroupInfoRequest* Group::unsafe_arena_release_group_info_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_info_request)
  if (_internal_has_group_info_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInfoRequest* temp = _impl_.message_.group_info_request_;
    _impl_.message_.group_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_info_request(::qaul::rpc::group::GroupInfoRequest* group_info_request) {
  clear_message();
  if (group_info_request) {
    set_has_group_info_request();
    _impl_.message_.group_info_request_ = group_info_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_info_request)
}
inline ::qaul::rpc::group::GroupInfoRequest* Group::_internal_mutable_group_info_request() {
  if (!_internal_has_group_info_request()) {
    clear_message();
    set_has_group_info_request();
    _impl_.message_.group_info_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupInfoRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_info_request_;
}
inline ::qaul::rpc::group::GroupInfoRequest* Group::mutable_group_info_request() {
  ::qaul::rpc::group::GroupInfoRequest* _msg = _internal_mutable_group_info_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_info_request)
  return _msg;
}

// .qaul.rpc.group.GroupInfoResponse group_info_response = 7;
inline bool Group::_internal_has_group_info_response() const {
  return message_case() == kGroupInfoResponse;
}
inline bool Group::has_group_info_response() const {
  return _internal_has_group_info_response();
}
inline void Group::set_has_group_info_response() {
  _impl_._oneof_case_[0] = kGroupInfoResponse;
}
inline void Group::clear_group_info_response() {
  if (_internal_has_group_info_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_info_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupInfoResponse* Group::release_group_info_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_info_response)
  if (_internal_has_group_info_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInfoResponse* temp = _impl_.message_.group_info_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupInfoResponse& Group::_internal_group_info_response() const {
  return _internal_has_group_info_response()
      ? *_impl_.message_.group_info_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupInfoResponse&>(::qaul::rpc::group::_GroupInfoResponse_default_instance_);
}
inline const ::qaul::rpc::group::GroupInfoResponse& Group::group_info_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_info_response)
  return _internal_group_info_response();
}
inline ::qaul::rpc::group::GroupInfoResponse* Group::unsafe_arena_release_group_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_info_response)
  if (_internal_has_group_info_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupInfoResponse* temp = _impl_.message_.group_info_response_;
    _impl_.message_.group_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_info_response(::qaul::rpc::group::GroupInfoResponse* group_info_response) {
  clear_message();
  if (group_info_response) {
    set_has_group_info_response();
    _impl_.message_.group_info_response_ = group_info_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_info_response)
}
inline ::qaul::rpc::group::GroupInfoResponse* Group::_internal_mutable_group_info_response() {
  if (!_internal_has_group_info_response()) {
    clear_message();
    set_has_group_info_response();
    _impl_.message_.group_info_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupInfoResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.group_info_response_;
}
inline ::qaul::rpc::group::GroupInfoResponse* Group::mutable_group_info_response() {
  ::qaul::rpc::group::GroupInfoResponse* _msg = _internal_mutable_group_info_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_info_response)
  return _msg;
}

// .qaul.rpc.group.GroupReplyInviteRequest group_reply_invite_request = 8;
inline bool Group::_internal_has_group_reply_invite_request() const {
  return message_case() == kGroupReplyInviteRequest;
}
inline bool Group::has_group_reply_invite_request() const {
  return _internal_has_group_reply_invite_request();
}
inline void Group::set_has_group_reply_invite_request() {
  _impl_._oneof_case_[0] = kGroupReplyInviteRequest;
}
inline void Group::clear_group_reply_invite_request() {
  if (_internal_has_group_reply_invite_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_reply_invite_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupReplyInviteRequest* Group::release_group_reply_invite_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_reply_invite_request)
  if (_internal_has_group_reply_invite_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupReplyInviteRequest* temp = _impl_.message_.group_reply_invite_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_reply_invite_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupReplyInviteRequest& Group::_internal_group_reply_invite_request() const {
  return _internal_has_group_reply_invite_request()
      ? *_impl_.message_.group_reply_invite_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupReplyInviteRequest&>(::qaul::rpc::group::_GroupReplyInviteRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupReplyInviteRequest& Group::group_reply_invite_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_reply_invite_request)
  return _internal_group_reply_invite_request();
}
inline ::qaul::rpc::group::GroupReplyInviteRequest* Group::unsafe_arena_release_group_reply_invite_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_reply_invite_request)
  if (_internal_has_group_reply_invite_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupReplyInviteRequest* temp = _impl_.message_.group_reply_invite_request_;
    _impl_.message_.group_reply_invite_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_reply_invite_request(::qaul::rpc::group::GroupReplyInviteRequest* group_reply_invite_request) {
  clear_message();
  if (group_reply_invite_request) {
    set_has_group_reply_invite_request();
    _impl_.message_.group_reply_invite_request_ = group_reply_invite_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_reply_invite_request)
}
inline ::qaul::rpc::group::GroupReplyInviteRequest* Group::_internal_mutable_group_reply_invite_request() {
  if (!_internal_has_group_reply_invite_request()) {
    clear_message();
    set_has_group_reply_invite_request();
    _impl_.message_.group_reply_invite_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupReplyInviteRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_reply_invite_request_;
}
inline ::qaul::rpc::group::GroupReplyInviteRequest* Group::mutable_group_reply_invite_request() {
  ::qaul::rpc::group::GroupReplyInviteRequest* _msg = _internal_mutable_group_reply_invite_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_reply_invite_request)
  return _msg;
}

// .qaul.rpc.group.GroupListRequest group_list_request = 9;
inline bool Group::_internal_has_group_list_request() const {
  return message_case() == kGroupListRequest;
}
inline bool Group::has_group_list_request() const {
  return _internal_has_group_list_request();
}
inline void Group::set_has_group_list_request() {
  _impl_._oneof_case_[0] = kGroupListRequest;
}
inline void Group::clear_group_list_request() {
  if (_internal_has_group_list_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_list_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupListRequest* Group::release_group_list_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_list_request)
  if (_internal_has_group_list_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupListRequest* temp = _impl_.message_.group_list_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_list_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupListRequest& Group::_internal_group_list_request() const {
  return _internal_has_group_list_request()
      ? *_impl_.message_.group_list_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupListRequest&>(::qaul::rpc::group::_GroupListRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupListRequest& Group::group_list_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_list_request)
  return _internal_group_list_request();
}
inline ::qaul::rpc::group::GroupListRequest* Group::unsafe_arena_release_group_list_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_list_request)
  if (_internal_has_group_list_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupListRequest* temp = _impl_.message_.group_list_request_;
    _impl_.message_.group_list_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_list_request(::qaul::rpc::group::GroupListRequest* group_list_request) {
  clear_message();
  if (group_list_request) {
    set_has_group_list_request();
    _impl_.message_.group_list_request_ = group_list_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_list_request)
}
inline ::qaul::rpc::group::GroupListRequest* Group::_internal_mutable_group_list_request() {
  if (!_internal_has_group_list_request()) {
    clear_message();
    set_has_group_list_request();
    _impl_.message_.group_list_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupListRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_list_request_;
}
inline ::qaul::rpc::group::GroupListRequest* Group::mutable_group_list_request() {
  ::qaul::rpc::group::GroupListRequest* _msg = _internal_mutable_group_list_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_list_request)
  return _msg;
}

// .qaul.rpc.group.GroupListResponse group_list_response = 10;
inline bool Group::_internal_has_group_list_response() const {
  return message_case() == kGroupListResponse;
}
inline bool Group::has_group_list_response() const {
  return _internal_has_group_list_response();
}
inline void Group::set_has_group_list_response() {
  _impl_._oneof_case_[0] = kGroupListResponse;
}
inline void Group::clear_group_list_response() {
  if (_internal_has_group_list_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_list_response_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupListResponse* Group::release_group_list_response() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_list_response)
  if (_internal_has_group_list_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupListResponse* temp = _impl_.message_.group_list_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_list_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupListResponse& Group::_internal_group_list_response() const {
  return _internal_has_group_list_response()
      ? *_impl_.message_.group_list_response_
      : reinterpret_cast< ::qaul::rpc::group::GroupListResponse&>(::qaul::rpc::group::_GroupListResponse_default_instance_);
}
inline const ::qaul::rpc::group::GroupListResponse& Group::group_list_response() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_list_response)
  return _internal_group_list_response();
}
inline ::qaul::rpc::group::GroupListResponse* Group::unsafe_arena_release_group_list_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_list_response)
  if (_internal_has_group_list_response()) {
    clear_has_message();
    ::qaul::rpc::group::GroupListResponse* temp = _impl_.message_.group_list_response_;
    _impl_.message_.group_list_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_list_response(::qaul::rpc::group::GroupListResponse* group_list_response) {
  clear_message();
  if (group_list_response) {
    set_has_group_list_response();
    _impl_.message_.group_list_response_ = group_list_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_list_response)
}
inline ::qaul::rpc::group::GroupListResponse* Group::_internal_mutable_group_list_response() {
  if (!_internal_has_group_list_response()) {
    clear_message();
    set_has_group_list_response();
    _impl_.message_.group_list_response_ = CreateMaybeMessage< ::qaul::rpc::group::GroupListResponse >(GetArenaForAllocation());
  }
  return _impl_.message_.group_list_response_;
}
inline ::qaul::rpc::group::GroupListResponse* Group::mutable_group_list_response() {
  ::qaul::rpc::group::GroupListResponse* _msg = _internal_mutable_group_list_response();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_list_response)
  return _msg;
}

// .qaul.rpc.group.GroupSendRequest group_send_request = 11;
inline bool Group::_internal_has_group_send_request() const {
  return message_case() == kGroupSendRequest;
}
inline bool Group::has_group_send_request() const {
  return _internal_has_group_send_request();
}
inline void Group::set_has_group_send_request() {
  _impl_._oneof_case_[0] = kGroupSendRequest;
}
inline void Group::clear_group_send_request() {
  if (_internal_has_group_send_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.group_send_request_;
    }
    clear_has_message();
  }
}
inline ::qaul::rpc::group::GroupSendRequest* Group::release_group_send_request() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.Group.group_send_request)
  if (_internal_has_group_send_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupSendRequest* temp = _impl_.message_.group_send_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.group_send_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::qaul::rpc::group::GroupSendRequest& Group::_internal_group_send_request() const {
  return _internal_has_group_send_request()
      ? *_impl_.message_.group_send_request_
      : reinterpret_cast< ::qaul::rpc::group::GroupSendRequest&>(::qaul::rpc::group::_GroupSendRequest_default_instance_);
}
inline const ::qaul::rpc::group::GroupSendRequest& Group::group_send_request() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.Group.group_send_request)
  return _internal_group_send_request();
}
inline ::qaul::rpc::group::GroupSendRequest* Group::unsafe_arena_release_group_send_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:qaul.rpc.group.Group.group_send_request)
  if (_internal_has_group_send_request()) {
    clear_has_message();
    ::qaul::rpc::group::GroupSendRequest* temp = _impl_.message_.group_send_request_;
    _impl_.message_.group_send_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Group::unsafe_arena_set_allocated_group_send_request(::qaul::rpc::group::GroupSendRequest* group_send_request) {
  clear_message();
  if (group_send_request) {
    set_has_group_send_request();
    _impl_.message_.group_send_request_ = group_send_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:qaul.rpc.group.Group.group_send_request)
}
inline ::qaul::rpc::group::GroupSendRequest* Group::_internal_mutable_group_send_request() {
  if (!_internal_has_group_send_request()) {
    clear_message();
    set_has_group_send_request();
    _impl_.message_.group_send_request_ = CreateMaybeMessage< ::qaul::rpc::group::GroupSendRequest >(GetArenaForAllocation());
  }
  return _impl_.message_.group_send_request_;
}
inline ::qaul::rpc::group::GroupSendRequest* Group::mutable_group_send_request() {
  ::qaul::rpc::group::GroupSendRequest* _msg = _internal_mutable_group_send_request();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.Group.group_send_request)
  return _msg;
}

inline bool Group::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Group::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Group::MessageCase Group::message_case() const {
  return Group::MessageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GroupCreateRequest

// string group_name = 1;
inline void GroupCreateRequest::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupCreateRequest::group_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupCreateRequest.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateRequest::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupCreateRequest.group_name)
}
inline std::string* GroupCreateRequest::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupCreateRequest.group_name)
  return _s;
}
inline const std::string& GroupCreateRequest::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupCreateRequest::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupCreateRequest.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupCreateRequest::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupCreateRequest.group_name)
}

// -------------------------------------------------------------------

// GroupCreateResponse

// string group_name = 1;
inline void GroupCreateResponse::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupCreateResponse::group_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupCreateResponse.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateResponse::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupCreateResponse.group_name)
}
inline std::string* GroupCreateResponse::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupCreateResponse.group_name)
  return _s;
}
inline const std::string& GroupCreateResponse::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupCreateResponse::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateResponse::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateResponse::release_group_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupCreateResponse.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupCreateResponse::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupCreateResponse.group_name)
}

// bytes group_id = 2;
inline void GroupCreateResponse::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupCreateResponse::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupCreateResponse.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupCreateResponse::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupCreateResponse.group_id)
}
inline std::string* GroupCreateResponse::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupCreateResponse.group_id)
  return _s;
}
inline const std::string& GroupCreateResponse::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupCreateResponse::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupCreateResponse::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupCreateResponse::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupCreateResponse.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupCreateResponse::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupCreateResponse.group_id)
}

// -------------------------------------------------------------------

// GroupRenameRequest

// bytes group_id = 1;
inline void GroupRenameRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupRenameRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRenameRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRenameRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRenameRequest.group_id)
}
inline std::string* GroupRenameRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRenameRequest.group_id)
  return _s;
}
inline const std::string& GroupRenameRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupRenameRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRenameRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRenameRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRenameRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupRenameRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRenameRequest.group_id)
}

// string group_name = 2;
inline void GroupRenameRequest::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupRenameRequest::group_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRenameRequest.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRenameRequest::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRenameRequest.group_name)
}
inline std::string* GroupRenameRequest::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRenameRequest.group_name)
  return _s;
}
inline const std::string& GroupRenameRequest::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupRenameRequest::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRenameRequest::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRenameRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRenameRequest.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupRenameRequest::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRenameRequest.group_name)
}

// -------------------------------------------------------------------

// GroupInviteMemberRequest

// bytes group_id = 1;
inline void GroupInviteMemberRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupInviteMemberRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInviteMemberRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInviteMemberRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInviteMemberRequest.group_id)
}
inline std::string* GroupInviteMemberRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInviteMemberRequest.group_id)
  return _s;
}
inline const std::string& GroupInviteMemberRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupInviteMemberRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInviteMemberRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInviteMemberRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInviteMemberRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupInviteMemberRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInviteMemberRequest.group_id)
}

// bytes user_id = 2;
inline void GroupInviteMemberRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupInviteMemberRequest::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInviteMemberRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInviteMemberRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInviteMemberRequest.user_id)
}
inline std::string* GroupInviteMemberRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInviteMemberRequest.user_id)
  return _s;
}
inline const std::string& GroupInviteMemberRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupInviteMemberRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInviteMemberRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInviteMemberRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInviteMemberRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupInviteMemberRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInviteMemberRequest.user_id)
}

// -------------------------------------------------------------------

// GroupReplyInviteRequest

// bytes group_id = 1;
inline void GroupReplyInviteRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupReplyInviteRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupReplyInviteRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupReplyInviteRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupReplyInviteRequest.group_id)
}
inline std::string* GroupReplyInviteRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupReplyInviteRequest.group_id)
  return _s;
}
inline const std::string& GroupReplyInviteRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupReplyInviteRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupReplyInviteRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupReplyInviteRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupReplyInviteRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupReplyInviteRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupReplyInviteRequest.group_id)
}

// bytes user_id = 2;
inline void GroupReplyInviteRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupReplyInviteRequest::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupReplyInviteRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupReplyInviteRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupReplyInviteRequest.user_id)
}
inline std::string* GroupReplyInviteRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupReplyInviteRequest.user_id)
  return _s;
}
inline const std::string& GroupReplyInviteRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupReplyInviteRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupReplyInviteRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupReplyInviteRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupReplyInviteRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupReplyInviteRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupReplyInviteRequest.user_id)
}

// bool accept = 3;
inline void GroupReplyInviteRequest::clear_accept() {
  _impl_.accept_ = false;
}
inline bool GroupReplyInviteRequest::_internal_accept() const {
  return _impl_.accept_;
}
inline bool GroupReplyInviteRequest::accept() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupReplyInviteRequest.accept)
  return _internal_accept();
}
inline void GroupReplyInviteRequest::_internal_set_accept(bool value) {
  
  _impl_.accept_ = value;
}
inline void GroupReplyInviteRequest::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupReplyInviteRequest.accept)
}

// -------------------------------------------------------------------

// GroupRemoveMemberRequest

// bytes group_id = 1;
inline void GroupRemoveMemberRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupRemoveMemberRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRemoveMemberRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRemoveMemberRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRemoveMemberRequest.group_id)
}
inline std::string* GroupRemoveMemberRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRemoveMemberRequest.group_id)
  return _s;
}
inline const std::string& GroupRemoveMemberRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupRemoveMemberRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRemoveMemberRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupRemoveMemberRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRemoveMemberRequest.group_id)
}

// bytes user_id = 2;
inline void GroupRemoveMemberRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupRemoveMemberRequest::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupRemoveMemberRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupRemoveMemberRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupRemoveMemberRequest.user_id)
}
inline std::string* GroupRemoveMemberRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupRemoveMemberRequest.user_id)
  return _s;
}
inline const std::string& GroupRemoveMemberRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupRemoveMemberRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupRemoveMemberRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupRemoveMemberRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupRemoveMemberRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupRemoveMemberRequest.user_id)
}

// -------------------------------------------------------------------

// GroupInfoRequest

// bytes group_id = 1;
inline void GroupInfoRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupInfoRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfoRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfoRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfoRequest.group_id)
}
inline std::string* GroupInfoRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInfoRequest.group_id)
  return _s;
}
inline const std::string& GroupInfoRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupInfoRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfoRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfoRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInfoRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupInfoRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInfoRequest.group_id)
}

// -------------------------------------------------------------------

// GroupMember

// bytes user_id = 1;
inline void GroupMember::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GroupMember::user_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupMember.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMember::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupMember.user_id)
}
inline std::string* GroupMember::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupMember.user_id)
  return _s;
}
inline const std::string& GroupMember::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GroupMember::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMember::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMember::release_user_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupMember.user_id)
  return _impl_.user_id_.Release();
}
inline void GroupMember::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupMember.user_id)
}

// uint32 role = 2;
inline void GroupMember::clear_role() {
  _impl_.role_ = 0u;
}
inline uint32_t GroupMember::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t GroupMember::role() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupMember.role)
  return _internal_role();
}
inline void GroupMember::_internal_set_role(uint32_t value) {
  
  _impl_.role_ = value;
}
inline void GroupMember::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupMember.role)
}

// uint64 joined_at = 3;
inline void GroupMember::clear_joined_at() {
  _impl_.joined_at_ = uint64_t{0u};
}
inline uint64_t GroupMember::_internal_joined_at() const {
  return _impl_.joined_at_;
}
inline uint64_t GroupMember::joined_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupMember.joined_at)
  return _internal_joined_at();
}
inline void GroupMember::_internal_set_joined_at(uint64_t value) {
  
  _impl_.joined_at_ = value;
}
inline void GroupMember::set_joined_at(uint64_t value) {
  _internal_set_joined_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupMember.joined_at)
}

// uint32 state = 4;
inline void GroupMember::clear_state() {
  _impl_.state_ = 0u;
}
inline uint32_t GroupMember::_internal_state() const {
  return _impl_.state_;
}
inline uint32_t GroupMember::state() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupMember.state)
  return _internal_state();
}
inline void GroupMember::_internal_set_state(uint32_t value) {
  
  _impl_.state_ = value;
}
inline void GroupMember::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupMember.state)
}

// -------------------------------------------------------------------

// GroupInfoResponse

// bytes group_id = 1;
inline void GroupInfoResponse::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupInfoResponse::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfoResponse.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfoResponse::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfoResponse.group_id)
}
inline std::string* GroupInfoResponse::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInfoResponse.group_id)
  return _s;
}
inline const std::string& GroupInfoResponse::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupInfoResponse::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfoResponse::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfoResponse::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInfoResponse.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupInfoResponse::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInfoResponse.group_id)
}

// string group_name = 2;
inline void GroupInfoResponse::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& GroupInfoResponse::group_name() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfoResponse.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfoResponse::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfoResponse.group_name)
}
inline std::string* GroupInfoResponse::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInfoResponse.group_name)
  return _s;
}
inline const std::string& GroupInfoResponse::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void GroupInfoResponse::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfoResponse::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfoResponse::release_group_name() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupInfoResponse.group_name)
  return _impl_.group_name_.Release();
}
inline void GroupInfoResponse::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupInfoResponse.group_name)
}

// uint64 created_at = 3;
inline void GroupInfoResponse::clear_created_at() {
  _impl_.created_at_ = uint64_t{0u};
}
inline uint64_t GroupInfoResponse::_internal_created_at() const {
  return _impl_.created_at_;
}
inline uint64_t GroupInfoResponse::created_at() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfoResponse.created_at)
  return _internal_created_at();
}
inline void GroupInfoResponse::_internal_set_created_at(uint64_t value) {
  
  _impl_.created_at_ = value;
}
inline void GroupInfoResponse::set_created_at(uint64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupInfoResponse.created_at)
}

// repeated .qaul.rpc.group.GroupMember members = 4;
inline int GroupInfoResponse::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int GroupInfoResponse::members_size() const {
  return _internal_members_size();
}
inline void GroupInfoResponse::clear_members() {
  _impl_.members_.Clear();
}
inline ::qaul::rpc::group::GroupMember* GroupInfoResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupInfoResponse.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupMember >*
GroupInfoResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.group.GroupInfoResponse.members)
  return &_impl_.members_;
}
inline const ::qaul::rpc::group::GroupMember& GroupInfoResponse::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::qaul::rpc::group::GroupMember& GroupInfoResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupInfoResponse.members)
  return _internal_members(index);
}
inline ::qaul::rpc::group::GroupMember* GroupInfoResponse::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::qaul::rpc::group::GroupMember* GroupInfoResponse::add_members() {
  ::qaul::rpc::group::GroupMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:qaul.rpc.group.GroupInfoResponse.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupMember >&
GroupInfoResponse::members() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.group.GroupInfoResponse.members)
  return _impl_.members_;
}

// -------------------------------------------------------------------

// GroupListRequest

// -------------------------------------------------------------------

// GroupListResponse

// repeated .qaul.rpc.group.GroupInfoResponse groups = 1;
inline int GroupListResponse::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int GroupListResponse::groups_size() const {
  return _internal_groups_size();
}
inline void GroupListResponse::clear_groups() {
  _impl_.groups_.Clear();
}
inline ::qaul::rpc::group::GroupInfoResponse* GroupListResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupListResponse.groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInfoResponse >*
GroupListResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:qaul.rpc.group.GroupListResponse.groups)
  return &_impl_.groups_;
}
inline const ::qaul::rpc::group::GroupInfoResponse& GroupListResponse::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::qaul::rpc::group::GroupInfoResponse& GroupListResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupListResponse.groups)
  return _internal_groups(index);
}
inline ::qaul::rpc::group::GroupInfoResponse* GroupListResponse::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::qaul::rpc::group::GroupInfoResponse* GroupListResponse::add_groups() {
  ::qaul::rpc::group::GroupInfoResponse* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:qaul.rpc.group.GroupListResponse.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::qaul::rpc::group::GroupInfoResponse >&
GroupListResponse::groups() const {
  // @@protoc_insertion_point(field_list:qaul.rpc.group.GroupListResponse.groups)
  return _impl_.groups_;
}

// -------------------------------------------------------------------

// GroupSendRequest

// bytes group_id = 1;
inline void GroupSendRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupSendRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupSendRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupSendRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupSendRequest.group_id)
}
inline std::string* GroupSendRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupSendRequest.group_id)
  return _s;
}
inline const std::string& GroupSendRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupSendRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupSendRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupSendRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupSendRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupSendRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupSendRequest.group_id)
}

// string message = 2;
inline void GroupSendRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GroupSendRequest::message() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupSendRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupSendRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupSendRequest.message)
}
inline std::string* GroupSendRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupSendRequest.message)
  return _s;
}
inline const std::string& GroupSendRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GroupSendRequest::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupSendRequest::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupSendRequest::release_message() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupSendRequest.message)
  return _impl_.message_.Release();
}
inline void GroupSendRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupSendRequest.message)
}

// -------------------------------------------------------------------

// GroupConversationRequest

// bytes group_id = 1;
inline void GroupConversationRequest::clear_group_id() {
  _impl_.group_id_.ClearToEmpty();
}
inline const std::string& GroupConversationRequest::group_id() const {
  // @@protoc_insertion_point(field_get:qaul.rpc.group.GroupConversationRequest.group_id)
  return _internal_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupConversationRequest::set_group_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:qaul.rpc.group.GroupConversationRequest.group_id)
}
inline std::string* GroupConversationRequest::mutable_group_id() {
  std::string* _s = _internal_mutable_group_id();
  // @@protoc_insertion_point(field_mutable:qaul.rpc.group.GroupConversationRequest.group_id)
  return _s;
}
inline const std::string& GroupConversationRequest::_internal_group_id() const {
  return _impl_.group_id_.Get();
}
inline void GroupConversationRequest::_internal_set_group_id(const std::string& value) {
  
  _impl_.group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupConversationRequest::_internal_mutable_group_id() {
  
  return _impl_.group_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupConversationRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:qaul.rpc.group.GroupConversationRequest.group_id)
  return _impl_.group_id_.Release();
}
inline void GroupConversationRequest::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  _impl_.group_id_.SetAllocated(group_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_id_.IsDefault()) {
    _impl_.group_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.group.GroupConversationRequest.group_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace group
}  // namespace rpc
}  // namespace qaul

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fgroup_2fgroup_5frpc_2eproto
