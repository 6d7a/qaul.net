// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router/users.proto

#include "router/users.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace qaul {
namespace rpc {
namespace users {
constexpr Users::Users(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct UsersDefaultTypeInternal {
  constexpr UsersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UsersDefaultTypeInternal() {}
  union {
    Users _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UsersDefaultTypeInternal _Users_default_instance_;
constexpr UserRequest::UserRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UserRequestDefaultTypeInternal {
  constexpr UserRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserRequestDefaultTypeInternal() {}
  union {
    UserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserRequestDefaultTypeInternal _UserRequest_default_instance_;
constexpr UserList::UserList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(){}
struct UserListDefaultTypeInternal {
  constexpr UserListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserListDefaultTypeInternal() {}
  union {
    UserList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserListDefaultTypeInternal _UserList_default_instance_;
constexpr UserEntry::UserEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_base58_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_base58_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connectivity_(0)

  , verified_(false)
  , blocked_(false){}
struct UserEntryDefaultTypeInternal {
  constexpr UserEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserEntryDefaultTypeInternal() {}
  union {
    UserEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserEntryDefaultTypeInternal _UserEntry_default_instance_;
}  // namespace users
}  // namespace rpc
}  // namespace qaul
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_router_2fusers_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_router_2fusers_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_router_2fusers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_router_2fusers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::Users, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::Users, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::Users, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserList, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserEntry, name_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserEntry, id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserEntry, id_base58_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserEntry, key_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserEntry, key_type_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserEntry, key_base58_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserEntry, connectivity_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserEntry, verified_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::users::UserEntry, blocked_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::qaul::rpc::users::Users)},
  { 9, -1, sizeof(::qaul::rpc::users::UserRequest)},
  { 14, -1, sizeof(::qaul::rpc::users::UserList)},
  { 20, -1, sizeof(::qaul::rpc::users::UserEntry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::users::_Users_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::users::_UserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::users::_UserList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::users::_UserEntry_default_instance_),
};

const char descriptor_table_protodef_router_2fusers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022router/users.proto\022\016qaul.rpc.users\"\250\001\n"
  "\005Users\0223\n\014user_request\030\001 \001(\0132\033.qaul.rpc."
  "users.UserRequestH\000\022-\n\tuser_list\030\002 \001(\0132\030"
  ".qaul.rpc.users.UserListH\000\0220\n\013user_updat"
  "e\030\003 \001(\0132\031.qaul.rpc.users.UserEntryH\000B\t\n\007"
  "message\"\r\n\013UserRequest\"3\n\010UserList\022\'\n\004us"
  "er\030\001 \003(\0132\031.qaul.rpc.users.UserEntry\"\302\001\n\t"
  "UserEntry\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\014\022\021\n\ti"
  "d_base58\030\004 \001(\t\022\013\n\003key\030\005 \001(\014\022\020\n\010key_type\030"
  "\006 \001(\t\022\022\n\nkey_base58\030\007 \001(\t\0222\n\014connectivit"
  "y\030\010 \001(\0162\034.qaul.rpc.users.Connectivity\022\020\n"
  "\010verified\030\t \001(\010\022\017\n\007blocked\030\n \001(\010*6\n\014Conn"
  "ectivity\022\n\n\006Online\020\000\022\r\n\tReachable\020\001\022\013\n\007O"
  "ffline\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_router_2fusers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2fusers_2eproto = {
  false, false, 536, descriptor_table_protodef_router_2fusers_2eproto, "router/users.proto", 
  &descriptor_table_router_2fusers_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_router_2fusers_2eproto::offsets,
  file_level_metadata_router_2fusers_2eproto, file_level_enum_descriptors_router_2fusers_2eproto, file_level_service_descriptors_router_2fusers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_router_2fusers_2eproto_getter() {
  return &descriptor_table_router_2fusers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_router_2fusers_2eproto(&descriptor_table_router_2fusers_2eproto);
namespace qaul {
namespace rpc {
namespace users {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Connectivity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2fusers_2eproto);
  return file_level_enum_descriptors_router_2fusers_2eproto[0];
}
bool Connectivity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Users::_Internal {
 public:
  static const ::qaul::rpc::users::UserRequest& user_request(const Users* msg);
  static const ::qaul::rpc::users::UserList& user_list(const Users* msg);
  static const ::qaul::rpc::users::UserEntry& user_update(const Users* msg);
};

const ::qaul::rpc::users::UserRequest&
Users::_Internal::user_request(const Users* msg) {
  return *msg->message_.user_request_;
}
const ::qaul::rpc::users::UserList&
Users::_Internal::user_list(const Users* msg) {
  return *msg->message_.user_list_;
}
const ::qaul::rpc::users::UserEntry&
Users::_Internal::user_update(const Users* msg) {
  return *msg->message_.user_update_;
}
void Users::set_allocated_user_request(::qaul::rpc::users::UserRequest* user_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (user_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::qaul::rpc::users::UserRequest>::GetOwningArena(user_request);
    if (message_arena != submessage_arena) {
      user_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_request, submessage_arena);
    }
    set_has_user_request();
    message_.user_request_ = user_request;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.Users.user_request)
}
void Users::set_allocated_user_list(::qaul::rpc::users::UserList* user_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (user_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::qaul::rpc::users::UserList>::GetOwningArena(user_list);
    if (message_arena != submessage_arena) {
      user_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_list, submessage_arena);
    }
    set_has_user_list();
    message_.user_list_ = user_list;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.Users.user_list)
}
void Users::set_allocated_user_update(::qaul::rpc::users::UserEntry* user_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (user_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::qaul::rpc::users::UserEntry>::GetOwningArena(user_update);
    if (message_arena != submessage_arena) {
      user_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_update, submessage_arena);
    }
    set_has_user_update();
    message_.user_update_ = user_update;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.users.Users.user_update)
}
Users::Users(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.users.Users)
}
Users::Users(const Users& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kUserRequest: {
      _internal_mutable_user_request()->::qaul::rpc::users::UserRequest::MergeFrom(from._internal_user_request());
      break;
    }
    case kUserList: {
      _internal_mutable_user_list()->::qaul::rpc::users::UserList::MergeFrom(from._internal_user_list());
      break;
    }
    case kUserUpdate: {
      _internal_mutable_user_update()->::qaul::rpc::users::UserEntry::MergeFrom(from._internal_user_update());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.users.Users)
}

inline void Users::SharedCtor() {
clear_has_message();
}

Users::~Users() {
  // @@protoc_insertion_point(destructor:qaul.rpc.users.Users)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Users::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Users::ArenaDtor(void* object) {
  Users* _this = reinterpret_cast< Users* >(object);
  (void)_this;
}
void Users::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Users::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Users::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:qaul.rpc.users.Users)
  switch (message_case()) {
    case kUserRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.user_request_;
      }
      break;
    }
    case kUserList: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.user_list_;
      }
      break;
    }
    case kUserUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.user_update_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Users::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.users.Users)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Users::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.rpc.users.UserRequest user_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .qaul.rpc.users.UserList user_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .qaul.rpc.users.UserEntry user_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Users::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.users.Users)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.rpc.users.UserRequest user_request = 1;
  if (_internal_has_user_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_request(this), target, stream);
  }

  // .qaul.rpc.users.UserList user_list = 2;
  if (_internal_has_user_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_list(this), target, stream);
  }

  // .qaul.rpc.users.UserEntry user_update = 3;
  if (_internal_has_user_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user_update(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.users.Users)
  return target;
}

size_t Users::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.users.Users)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .qaul.rpc.users.UserRequest user_request = 1;
    case kUserRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.user_request_);
      break;
    }
    // .qaul.rpc.users.UserList user_list = 2;
    case kUserList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.user_list_);
      break;
    }
    // .qaul.rpc.users.UserEntry user_update = 3;
    case kUserUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.user_update_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Users::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Users::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Users::GetClassData() const { return &_class_data_; }

void Users::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Users *>(to)->MergeFrom(
      static_cast<const Users &>(from));
}


void Users::MergeFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.users.Users)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kUserRequest: {
      _internal_mutable_user_request()->::qaul::rpc::users::UserRequest::MergeFrom(from._internal_user_request());
      break;
    }
    case kUserList: {
      _internal_mutable_user_list()->::qaul::rpc::users::UserList::MergeFrom(from._internal_user_list());
      break;
    }
    case kUserUpdate: {
      _internal_mutable_user_update()->::qaul::rpc::users::UserEntry::MergeFrom(from._internal_user_update());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Users::CopyFrom(const Users& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.users.Users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Users::IsInitialized() const {
  return true;
}

void Users::InternalSwap(Users* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Users::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2fusers_2eproto_getter, &descriptor_table_router_2fusers_2eproto_once,
      file_level_metadata_router_2fusers_2eproto[0]);
}

// ===================================================================

class UserRequest::_Internal {
 public:
};

UserRequest::UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.users.UserRequest)
}
UserRequest::UserRequest(const UserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.users.UserRequest)
}

inline void UserRequest::SharedCtor() {
}

UserRequest::~UserRequest() {
  // @@protoc_insertion_point(destructor:qaul.rpc.users.UserRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserRequest::ArenaDtor(void* object) {
  UserRequest* _this = reinterpret_cast< UserRequest* >(object);
  (void)_this;
}
void UserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.users.UserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.users.UserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.users.UserRequest)
  return target;
}

size_t UserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.users.UserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRequest::GetClassData() const { return &_class_data_; }

void UserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UserRequest *>(to)->MergeFrom(
      static_cast<const UserRequest &>(from));
}


void UserRequest::MergeFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.users.UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRequest::CopyFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.users.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  return true;
}

void UserRequest::InternalSwap(UserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2fusers_2eproto_getter, &descriptor_table_router_2fusers_2eproto_once,
      file_level_metadata_router_2fusers_2eproto[1]);
}

// ===================================================================

class UserList::_Internal {
 public:
};

UserList::UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  user_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.users.UserList)
}
UserList::UserList(const UserList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_(from.user_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.users.UserList)
}

inline void UserList::SharedCtor() {
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:qaul.rpc.users.UserList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserList::ArenaDtor(void* object) {
  UserList* _this = reinterpret_cast< UserList* >(object);
  (void)_this;
}
void UserList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.users.UserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.rpc.users.UserEntry user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.users.UserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.rpc.users.UserEntry user = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_user(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.users.UserList)
  return target;
}

size_t UserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.users.UserList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.users.UserEntry user = 1;
  total_size += 1UL * this->_internal_user_size();
  for (const auto& msg : this->user_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserList::GetClassData() const { return &_class_data_; }

void UserList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UserList *>(to)->MergeFrom(
      static_cast<const UserList &>(from));
}


void UserList::MergeFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.users.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.users.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {
  return true;
}

void UserList::InternalSwap(UserList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_.InternalSwap(&other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2fusers_2eproto_getter, &descriptor_table_router_2fusers_2eproto_once,
      file_level_metadata_router_2fusers_2eproto[2]);
}

// ===================================================================

class UserEntry::_Internal {
 public:
};

UserEntry::UserEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.users.UserEntry)
}
UserEntry::UserEntry(const UserEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  id_base58_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id_base58().empty()) {
    id_base58_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id_base58(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_type().empty()) {
    key_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_type(), 
      GetArenaForAllocation());
  }
  key_base58_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key_base58().empty()) {
    key_base58_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_base58(), 
      GetArenaForAllocation());
  }
  ::memcpy(&connectivity_, &from.connectivity_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocked_) -
    reinterpret_cast<char*>(&connectivity_)) + sizeof(blocked_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.users.UserEntry)
}

inline void UserEntry::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_base58_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_base58_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connectivity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&blocked_) -
    reinterpret_cast<char*>(&connectivity_)) + sizeof(blocked_));
}

UserEntry::~UserEntry() {
  // @@protoc_insertion_point(destructor:qaul.rpc.users.UserEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UserEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_base58_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_base58_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserEntry::ArenaDtor(void* object) {
  UserEntry* _this = reinterpret_cast< UserEntry* >(object);
  (void)_this;
}
void UserEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.users.UserEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  id_.ClearToEmpty();
  id_base58_.ClearToEmpty();
  key_.ClearToEmpty();
  key_type_.ClearToEmpty();
  key_base58_.ClearToEmpty();
  ::memset(&connectivity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocked_) -
      reinterpret_cast<char*>(&connectivity_)) + sizeof(blocked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "qaul.rpc.users.UserEntry.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id_base58 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_id_base58();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "qaul.rpc.users.UserEntry.id_base58"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_key_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "qaul.rpc.users.UserEntry.key_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key_base58 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_key_base58();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "qaul.rpc.users.UserEntry.key_base58"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .qaul.rpc.users.Connectivity connectivity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connectivity(static_cast<::qaul::rpc::users::Connectivity>(val));
        } else goto handle_unusual;
        continue;
      // bool verified = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blocked = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.users.UserEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.users.UserEntry.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes id = 2;
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string id_base58 = 4;
  if (!this->_internal_id_base58().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id_base58().data(), static_cast<int>(this->_internal_id_base58().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.users.UserEntry.id_base58");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_id_base58(), target);
  }

  // bytes key = 5;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_key(), target);
  }

  // string key_type = 6;
  if (!this->_internal_key_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_type().data(), static_cast<int>(this->_internal_key_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.users.UserEntry.key_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_key_type(), target);
  }

  // string key_base58 = 7;
  if (!this->_internal_key_base58().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_base58().data(), static_cast<int>(this->_internal_key_base58().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "qaul.rpc.users.UserEntry.key_base58");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_key_base58(), target);
  }

  // .qaul.rpc.users.Connectivity connectivity = 8;
  if (this->_internal_connectivity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_connectivity(), target);
  }

  // bool verified = 9;
  if (this->_internal_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_verified(), target);
  }

  // bool blocked = 10;
  if (this->_internal_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_blocked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.users.UserEntry)
  return target;
}

size_t UserEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.users.UserEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // string id_base58 = 4;
  if (!this->_internal_id_base58().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id_base58());
  }

  // bytes key = 5;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // string key_type = 6;
  if (!this->_internal_key_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_type());
  }

  // string key_base58 = 7;
  if (!this->_internal_key_base58().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_base58());
  }

  // .qaul.rpc.users.Connectivity connectivity = 8;
  if (this->_internal_connectivity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connectivity());
  }

  // bool verified = 9;
  if (this->_internal_verified() != 0) {
    total_size += 1 + 1;
  }

  // bool blocked = 10;
  if (this->_internal_blocked() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserEntry::GetClassData() const { return &_class_data_; }

void UserEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UserEntry *>(to)->MergeFrom(
      static_cast<const UserEntry &>(from));
}


void UserEntry::MergeFrom(const UserEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.users.UserEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_id_base58().empty()) {
    _internal_set_id_base58(from._internal_id_base58());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_key_type().empty()) {
    _internal_set_key_type(from._internal_key_type());
  }
  if (!from._internal_key_base58().empty()) {
    _internal_set_key_base58(from._internal_key_base58());
  }
  if (from._internal_connectivity() != 0) {
    _internal_set_connectivity(from._internal_connectivity());
  }
  if (from._internal_verified() != 0) {
    _internal_set_verified(from._internal_verified());
  }
  if (from._internal_blocked() != 0) {
    _internal_set_blocked(from._internal_blocked());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserEntry::CopyFrom(const UserEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.users.UserEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEntry::IsInitialized() const {
  return true;
}

void UserEntry::InternalSwap(UserEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_base58_, GetArenaForAllocation(),
      &other->id_base58_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_type_, GetArenaForAllocation(),
      &other->key_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_base58_, GetArenaForAllocation(),
      &other->key_base58_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserEntry, blocked_)
      + sizeof(UserEntry::blocked_)
      - PROTOBUF_FIELD_OFFSET(UserEntry, connectivity_)>(
          reinterpret_cast<char*>(&connectivity_),
          reinterpret_cast<char*>(&other->connectivity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2fusers_2eproto_getter, &descriptor_table_router_2fusers_2eproto_once,
      file_level_metadata_router_2fusers_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace users
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::rpc::users::Users* Arena::CreateMaybeMessage< ::qaul::rpc::users::Users >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::users::Users >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::users::UserRequest* Arena::CreateMaybeMessage< ::qaul::rpc::users::UserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::users::UserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::users::UserList* Arena::CreateMaybeMessage< ::qaul::rpc::users::UserList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::users::UserList >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::users::UserEntry* Arena::CreateMaybeMessage< ::qaul::rpc::users::UserEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::users::UserEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
