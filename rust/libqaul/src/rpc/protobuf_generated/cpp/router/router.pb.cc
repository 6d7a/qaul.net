// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router/router.proto

#include "router/router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace qaul {
namespace rpc {
namespace router {
constexpr Router::Router(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RouterDefaultTypeInternal {
  constexpr RouterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouterDefaultTypeInternal() {}
  union {
    Router _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouterDefaultTypeInternal _Router_default_instance_;
constexpr RoutingTableRequest::RoutingTableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RoutingTableRequestDefaultTypeInternal {
  constexpr RoutingTableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingTableRequestDefaultTypeInternal() {}
  union {
    RoutingTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingTableRequestDefaultTypeInternal _RoutingTableRequest_default_instance_;
constexpr RoutingTableList::RoutingTableList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routing_table_(){}
struct RoutingTableListDefaultTypeInternal {
  constexpr RoutingTableListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingTableListDefaultTypeInternal() {}
  union {
    RoutingTableList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingTableListDefaultTypeInternal _RoutingTableList_default_instance_;
constexpr RoutingTableEntry::RoutingTableEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connections_()
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RoutingTableEntryDefaultTypeInternal {
  constexpr RoutingTableEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingTableEntryDefaultTypeInternal() {}
  union {
    RoutingTableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingTableEntryDefaultTypeInternal _RoutingTableEntry_default_instance_;
constexpr RoutingTableConnection::RoutingTableConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : via_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_(0)

  , rtt_(0u){}
struct RoutingTableConnectionDefaultTypeInternal {
  constexpr RoutingTableConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingTableConnectionDefaultTypeInternal() {}
  union {
    RoutingTableConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingTableConnectionDefaultTypeInternal _RoutingTableConnection_default_instance_;
constexpr ConnectionsRequest::ConnectionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ConnectionsRequestDefaultTypeInternal {
  constexpr ConnectionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionsRequestDefaultTypeInternal() {}
  union {
    ConnectionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionsRequestDefaultTypeInternal _ConnectionsRequest_default_instance_;
constexpr ConnectionsList::ConnectionsList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lan_()
  , internet_()
  , ble_()
  , local_(){}
struct ConnectionsListDefaultTypeInternal {
  constexpr ConnectionsListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionsListDefaultTypeInternal() {}
  union {
    ConnectionsList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionsListDefaultTypeInternal _ConnectionsList_default_instance_;
constexpr ConnectionsUserEntry::ConnectionsUserEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connections_()
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConnectionsUserEntryDefaultTypeInternal {
  constexpr ConnectionsUserEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionsUserEntryDefaultTypeInternal() {}
  union {
    ConnectionsUserEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionsUserEntryDefaultTypeInternal _ConnectionsUserEntry_default_instance_;
constexpr ConnectionEntry::ConnectionEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : via_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rtt_(0u)
  , hop_count_(0u){}
struct ConnectionEntryDefaultTypeInternal {
  constexpr ConnectionEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionEntryDefaultTypeInternal() {}
  union {
    ConnectionEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionEntryDefaultTypeInternal _ConnectionEntry_default_instance_;
constexpr NeighboursRequest::NeighboursRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NeighboursRequestDefaultTypeInternal {
  constexpr NeighboursRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NeighboursRequestDefaultTypeInternal() {}
  union {
    NeighboursRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NeighboursRequestDefaultTypeInternal _NeighboursRequest_default_instance_;
constexpr NeighboursList::NeighboursList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lan_()
  , internet_(){}
struct NeighboursListDefaultTypeInternal {
  constexpr NeighboursListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NeighboursListDefaultTypeInternal() {}
  union {
    NeighboursList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NeighboursListDefaultTypeInternal _NeighboursList_default_instance_;
constexpr NeighboursEntry::NeighboursEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rtt_(0u){}
struct NeighboursEntryDefaultTypeInternal {
  constexpr NeighboursEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NeighboursEntryDefaultTypeInternal() {}
  union {
    NeighboursEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NeighboursEntryDefaultTypeInternal _NeighboursEntry_default_instance_;
}  // namespace router
}  // namespace rpc
}  // namespace qaul
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_router_2frouter_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_router_2frouter_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_router_2frouter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_router_2frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::Router, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::Router, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::Router, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableList, routing_table_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableEntry, user_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableEntry, connections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableConnection, module_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableConnection, rtt_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::RoutingTableConnection, via_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsList, lan_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsList, internet_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsList, ble_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsList, local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsUserEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsUserEntry, user_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionsUserEntry, connections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionEntry, rtt_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionEntry, hop_count_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::ConnectionEntry, via_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursList, lan_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursList, internet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursEntry, node_id_),
  PROTOBUF_FIELD_OFFSET(::qaul::rpc::router::NeighboursEntry, rtt_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::qaul::rpc::router::Router)},
  { 12, -1, sizeof(::qaul::rpc::router::RoutingTableRequest)},
  { 17, -1, sizeof(::qaul::rpc::router::RoutingTableList)},
  { 23, -1, sizeof(::qaul::rpc::router::RoutingTableEntry)},
  { 30, -1, sizeof(::qaul::rpc::router::RoutingTableConnection)},
  { 38, -1, sizeof(::qaul::rpc::router::ConnectionsRequest)},
  { 43, -1, sizeof(::qaul::rpc::router::ConnectionsList)},
  { 52, -1, sizeof(::qaul::rpc::router::ConnectionsUserEntry)},
  { 59, -1, sizeof(::qaul::rpc::router::ConnectionEntry)},
  { 67, -1, sizeof(::qaul::rpc::router::NeighboursRequest)},
  { 72, -1, sizeof(::qaul::rpc::router::NeighboursList)},
  { 79, -1, sizeof(::qaul::rpc::router::NeighboursEntry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_Router_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_RoutingTableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_RoutingTableList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_RoutingTableEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_RoutingTableConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_ConnectionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_ConnectionsList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_ConnectionsUserEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_ConnectionEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_NeighboursRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_NeighboursList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qaul::rpc::router::_NeighboursEntry_default_instance_),
};

const char descriptor_table_protodef_router_2frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023router/router.proto\022\017qaul.rpc.router\"\226"
  "\003\n\006Router\022E\n\025routing_table_request\030\001 \001(\013"
  "2$.qaul.rpc.router.RoutingTableRequestH\000"
  "\022:\n\rrouting_table\030\002 \001(\0132!.qaul.rpc.route"
  "r.RoutingTableListH\000\022B\n\023connections_requ"
  "est\030\003 \001(\0132#.qaul.rpc.router.ConnectionsR"
  "equestH\000\022<\n\020connections_list\030\004 \001(\0132 .qau"
  "l.rpc.router.ConnectionsListH\000\022@\n\022neighb"
  "ours_request\030\005 \001(\0132\".qaul.rpc.router.Nei"
  "ghboursRequestH\000\022:\n\017neighbours_list\030\006 \001("
  "\0132\037.qaul.rpc.router.NeighboursListH\000B\t\n\007"
  "message\"\025\n\023RoutingTableRequest\"M\n\020Routin"
  "gTableList\0229\n\rrouting_table\030\001 \003(\0132\".qaul"
  ".rpc.router.RoutingTableEntry\"b\n\021Routing"
  "TableEntry\022\017\n\007user_id\030\001 \001(\014\022<\n\013connectio"
  "ns\030\002 \003(\0132\'.qaul.rpc.router.RoutingTableC"
  "onnection\"e\n\026RoutingTableConnection\0221\n\006m"
  "odule\030\002 \001(\0162!.qaul.rpc.router.Connection"
  "Module\022\013\n\003rtt\030\003 \001(\r\022\013\n\003via\030\004 \001(\014\"\024\n\022Conn"
  "ectionsRequest\"\350\001\n\017ConnectionsList\0222\n\003la"
  "n\030\001 \003(\0132%.qaul.rpc.router.ConnectionsUse"
  "rEntry\0227\n\010internet\030\002 \003(\0132%.qaul.rpc.rout"
  "er.ConnectionsUserEntry\0222\n\003ble\030\003 \003(\0132%.q"
  "aul.rpc.router.ConnectionsUserEntry\0224\n\005l"
  "ocal\030\004 \003(\0132%.qaul.rpc.router.Connections"
  "UserEntry\"^\n\024ConnectionsUserEntry\022\017\n\007use"
  "r_id\030\001 \001(\014\0225\n\013connections\030\002 \003(\0132 .qaul.r"
  "pc.router.ConnectionEntry\">\n\017ConnectionE"
  "ntry\022\013\n\003rtt\030\001 \001(\r\022\021\n\thop_count\030\002 \001(\r\022\013\n\003"
  "via\030\003 \001(\014\"\023\n\021NeighboursRequest\"s\n\016Neighb"
  "oursList\022-\n\003lan\030\001 \003(\0132 .qaul.rpc.router."
  "NeighboursEntry\0222\n\010internet\030\002 \003(\0132 .qaul"
  ".rpc.router.NeighboursEntry\"/\n\017Neighbour"
  "sEntry\022\017\n\007node_id\030\001 \001(\014\022\013\n\003rtt\030\002 \001(\r*G\n\020"
  "ConnectionModule\022\010\n\004NONE\020\000\022\007\n\003LAN\020\001\022\014\n\010I"
  "NTERNET\020\002\022\007\n\003BLE\020\003\022\t\n\005LOCAL\020\004b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_router_2frouter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2frouter_2eproto = {
  false, false, 1437, descriptor_table_protodef_router_2frouter_2eproto, "router/router.proto", 
  &descriptor_table_router_2frouter_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_router_2frouter_2eproto::offsets,
  file_level_metadata_router_2frouter_2eproto, file_level_enum_descriptors_router_2frouter_2eproto, file_level_service_descriptors_router_2frouter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_router_2frouter_2eproto_getter() {
  return &descriptor_table_router_2frouter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_router_2frouter_2eproto(&descriptor_table_router_2frouter_2eproto);
namespace qaul {
namespace rpc {
namespace router {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionModule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2frouter_2eproto);
  return file_level_enum_descriptors_router_2frouter_2eproto[0];
}
bool ConnectionModule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Router::_Internal {
 public:
  static const ::qaul::rpc::router::RoutingTableRequest& routing_table_request(const Router* msg);
  static const ::qaul::rpc::router::RoutingTableList& routing_table(const Router* msg);
  static const ::qaul::rpc::router::ConnectionsRequest& connections_request(const Router* msg);
  static const ::qaul::rpc::router::ConnectionsList& connections_list(const Router* msg);
  static const ::qaul::rpc::router::NeighboursRequest& neighbours_request(const Router* msg);
  static const ::qaul::rpc::router::NeighboursList& neighbours_list(const Router* msg);
};

const ::qaul::rpc::router::RoutingTableRequest&
Router::_Internal::routing_table_request(const Router* msg) {
  return *msg->message_.routing_table_request_;
}
const ::qaul::rpc::router::RoutingTableList&
Router::_Internal::routing_table(const Router* msg) {
  return *msg->message_.routing_table_;
}
const ::qaul::rpc::router::ConnectionsRequest&
Router::_Internal::connections_request(const Router* msg) {
  return *msg->message_.connections_request_;
}
const ::qaul::rpc::router::ConnectionsList&
Router::_Internal::connections_list(const Router* msg) {
  return *msg->message_.connections_list_;
}
const ::qaul::rpc::router::NeighboursRequest&
Router::_Internal::neighbours_request(const Router* msg) {
  return *msg->message_.neighbours_request_;
}
const ::qaul::rpc::router::NeighboursList&
Router::_Internal::neighbours_list(const Router* msg) {
  return *msg->message_.neighbours_list_;
}
void Router::set_allocated_routing_table_request(::qaul::rpc::router::RoutingTableRequest* routing_table_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (routing_table_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::qaul::rpc::router::RoutingTableRequest>::GetOwningArena(routing_table_request);
    if (message_arena != submessage_arena) {
      routing_table_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_table_request, submessage_arena);
    }
    set_has_routing_table_request();
    message_.routing_table_request_ = routing_table_request;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.routing_table_request)
}
void Router::set_allocated_routing_table(::qaul::rpc::router::RoutingTableList* routing_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (routing_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::qaul::rpc::router::RoutingTableList>::GetOwningArena(routing_table);
    if (message_arena != submessage_arena) {
      routing_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_table, submessage_arena);
    }
    set_has_routing_table();
    message_.routing_table_ = routing_table;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.routing_table)
}
void Router::set_allocated_connections_request(::qaul::rpc::router::ConnectionsRequest* connections_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connections_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::qaul::rpc::router::ConnectionsRequest>::GetOwningArena(connections_request);
    if (message_arena != submessage_arena) {
      connections_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connections_request, submessage_arena);
    }
    set_has_connections_request();
    message_.connections_request_ = connections_request;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.connections_request)
}
void Router::set_allocated_connections_list(::qaul::rpc::router::ConnectionsList* connections_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (connections_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::qaul::rpc::router::ConnectionsList>::GetOwningArena(connections_list);
    if (message_arena != submessage_arena) {
      connections_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connections_list, submessage_arena);
    }
    set_has_connections_list();
    message_.connections_list_ = connections_list;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.connections_list)
}
void Router::set_allocated_neighbours_request(::qaul::rpc::router::NeighboursRequest* neighbours_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (neighbours_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::qaul::rpc::router::NeighboursRequest>::GetOwningArena(neighbours_request);
    if (message_arena != submessage_arena) {
      neighbours_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbours_request, submessage_arena);
    }
    set_has_neighbours_request();
    message_.neighbours_request_ = neighbours_request;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.neighbours_request)
}
void Router::set_allocated_neighbours_list(::qaul::rpc::router::NeighboursList* neighbours_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (neighbours_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::qaul::rpc::router::NeighboursList>::GetOwningArena(neighbours_list);
    if (message_arena != submessage_arena) {
      neighbours_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbours_list, submessage_arena);
    }
    set_has_neighbours_list();
    message_.neighbours_list_ = neighbours_list;
  }
  // @@protoc_insertion_point(field_set_allocated:qaul.rpc.router.Router.neighbours_list)
}
Router::Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kRoutingTableRequest: {
      _internal_mutable_routing_table_request()->::qaul::rpc::router::RoutingTableRequest::MergeFrom(from._internal_routing_table_request());
      break;
    }
    case kRoutingTable: {
      _internal_mutable_routing_table()->::qaul::rpc::router::RoutingTableList::MergeFrom(from._internal_routing_table());
      break;
    }
    case kConnectionsRequest: {
      _internal_mutable_connections_request()->::qaul::rpc::router::ConnectionsRequest::MergeFrom(from._internal_connections_request());
      break;
    }
    case kConnectionsList: {
      _internal_mutable_connections_list()->::qaul::rpc::router::ConnectionsList::MergeFrom(from._internal_connections_list());
      break;
    }
    case kNeighboursRequest: {
      _internal_mutable_neighbours_request()->::qaul::rpc::router::NeighboursRequest::MergeFrom(from._internal_neighbours_request());
      break;
    }
    case kNeighboursList: {
      _internal_mutable_neighbours_list()->::qaul::rpc::router::NeighboursList::MergeFrom(from._internal_neighbours_list());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.Router)
}

inline void Router::SharedCtor() {
clear_has_message();
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.Router)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Router::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void Router::ArenaDtor(void* object) {
  Router* _this = reinterpret_cast< Router* >(object);
  (void)_this;
}
void Router::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Router::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Router::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:qaul.rpc.router.Router)
  switch (message_case()) {
    case kRoutingTableRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.routing_table_request_;
      }
      break;
    }
    case kRoutingTable: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.routing_table_;
      }
      break;
    }
    case kConnectionsRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.connections_request_;
      }
      break;
    }
    case kConnectionsList: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.connections_list_;
      }
      break;
    }
    case kNeighboursRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.neighbours_request_;
      }
      break;
    }
    case kNeighboursList: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.neighbours_list_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.Router)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Router::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.rpc.router.RoutingTableRequest routing_table_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_table_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .qaul.rpc.router.RoutingTableList routing_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .qaul.rpc.router.ConnectionsRequest connections_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_connections_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .qaul.rpc.router.ConnectionsList connections_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_connections_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .qaul.rpc.router.NeighboursRequest neighbours_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbours_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .qaul.rpc.router.NeighboursList neighbours_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbours_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Router::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.Router)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.rpc.router.RoutingTableRequest routing_table_request = 1;
  if (_internal_has_routing_table_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::routing_table_request(this), target, stream);
  }

  // .qaul.rpc.router.RoutingTableList routing_table = 2;
  if (_internal_has_routing_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::routing_table(this), target, stream);
  }

  // .qaul.rpc.router.ConnectionsRequest connections_request = 3;
  if (_internal_has_connections_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::connections_request(this), target, stream);
  }

  // .qaul.rpc.router.ConnectionsList connections_list = 4;
  if (_internal_has_connections_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::connections_list(this), target, stream);
  }

  // .qaul.rpc.router.NeighboursRequest neighbours_request = 5;
  if (_internal_has_neighbours_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::neighbours_request(this), target, stream);
  }

  // .qaul.rpc.router.NeighboursList neighbours_list = 6;
  if (_internal_has_neighbours_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::neighbours_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.Router)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .qaul.rpc.router.RoutingTableRequest routing_table_request = 1;
    case kRoutingTableRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.routing_table_request_);
      break;
    }
    // .qaul.rpc.router.RoutingTableList routing_table = 2;
    case kRoutingTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.routing_table_);
      break;
    }
    // .qaul.rpc.router.ConnectionsRequest connections_request = 3;
    case kConnectionsRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.connections_request_);
      break;
    }
    // .qaul.rpc.router.ConnectionsList connections_list = 4;
    case kConnectionsList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.connections_list_);
      break;
    }
    // .qaul.rpc.router.NeighboursRequest neighbours_request = 5;
    case kNeighboursRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.neighbours_request_);
      break;
    }
    // .qaul.rpc.router.NeighboursList neighbours_list = 6;
    case kNeighboursList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.neighbours_list_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Router::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Router::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Router::GetClassData() const { return &_class_data_; }

void Router::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Router *>(to)->MergeFrom(
      static_cast<const Router &>(from));
}


void Router::MergeFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.Router)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kRoutingTableRequest: {
      _internal_mutable_routing_table_request()->::qaul::rpc::router::RoutingTableRequest::MergeFrom(from._internal_routing_table_request());
      break;
    }
    case kRoutingTable: {
      _internal_mutable_routing_table()->::qaul::rpc::router::RoutingTableList::MergeFrom(from._internal_routing_table());
      break;
    }
    case kConnectionsRequest: {
      _internal_mutable_connections_request()->::qaul::rpc::router::ConnectionsRequest::MergeFrom(from._internal_connections_request());
      break;
    }
    case kConnectionsList: {
      _internal_mutable_connections_list()->::qaul::rpc::router::ConnectionsList::MergeFrom(from._internal_connections_list());
      break;
    }
    case kNeighboursRequest: {
      _internal_mutable_neighbours_request()->::qaul::rpc::router::NeighboursRequest::MergeFrom(from._internal_neighbours_request());
      break;
    }
    case kNeighboursList: {
      _internal_mutable_neighbours_list()->::qaul::rpc::router::NeighboursList::MergeFrom(from._internal_neighbours_list());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Router::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[0]);
}

// ===================================================================

class RoutingTableRequest::_Internal {
 public:
};

RoutingTableRequest::RoutingTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.RoutingTableRequest)
}
RoutingTableRequest::RoutingTableRequest(const RoutingTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.RoutingTableRequest)
}

inline void RoutingTableRequest::SharedCtor() {
}

RoutingTableRequest::~RoutingTableRequest() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.RoutingTableRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingTableRequest::ArenaDtor(void* object) {
  RoutingTableRequest* _this = reinterpret_cast< RoutingTableRequest* >(object);
  (void)_this;
}
void RoutingTableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.RoutingTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingTableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingTableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.RoutingTableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.RoutingTableRequest)
  return target;
}

size_t RoutingTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.RoutingTableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingTableRequest::GetClassData() const { return &_class_data_; }

void RoutingTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoutingTableRequest *>(to)->MergeFrom(
      static_cast<const RoutingTableRequest &>(from));
}


void RoutingTableRequest::MergeFrom(const RoutingTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.RoutingTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingTableRequest::CopyFrom(const RoutingTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.RoutingTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingTableRequest::IsInitialized() const {
  return true;
}

void RoutingTableRequest::InternalSwap(RoutingTableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingTableRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[1]);
}

// ===================================================================

class RoutingTableList::_Internal {
 public:
};

RoutingTableList::RoutingTableList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  routing_table_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.RoutingTableList)
}
RoutingTableList::RoutingTableList(const RoutingTableList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routing_table_(from.routing_table_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.RoutingTableList)
}

inline void RoutingTableList::SharedCtor() {
}

RoutingTableList::~RoutingTableList() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.RoutingTableList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingTableList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingTableList::ArenaDtor(void* object) {
  RoutingTableList* _this = reinterpret_cast< RoutingTableList* >(object);
  (void)_this;
}
void RoutingTableList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingTableList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingTableList::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.RoutingTableList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routing_table_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingTableList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.rpc.router.RoutingTableEntry routing_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routing_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingTableList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.RoutingTableList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.RoutingTableEntry routing_table = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routing_table_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_routing_table(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.RoutingTableList)
  return target;
}

size_t RoutingTableList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.RoutingTableList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.RoutingTableEntry routing_table = 1;
  total_size += 1UL * this->_internal_routing_table_size();
  for (const auto& msg : this->routing_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingTableList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingTableList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingTableList::GetClassData() const { return &_class_data_; }

void RoutingTableList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoutingTableList *>(to)->MergeFrom(
      static_cast<const RoutingTableList &>(from));
}


void RoutingTableList::MergeFrom(const RoutingTableList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.RoutingTableList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routing_table_.MergeFrom(from.routing_table_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingTableList::CopyFrom(const RoutingTableList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.RoutingTableList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingTableList::IsInitialized() const {
  return true;
}

void RoutingTableList::InternalSwap(RoutingTableList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  routing_table_.InternalSwap(&other->routing_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingTableList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[2]);
}

// ===================================================================

class RoutingTableEntry::_Internal {
 public:
};

RoutingTableEntry::RoutingTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  connections_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.RoutingTableEntry)
}
RoutingTableEntry::RoutingTableEntry(const RoutingTableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.RoutingTableEntry)
}

inline void RoutingTableEntry::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoutingTableEntry::~RoutingTableEntry() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.RoutingTableEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingTableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoutingTableEntry::ArenaDtor(void* object) {
  RoutingTableEntry* _this = reinterpret_cast< RoutingTableEntry* >(object);
  (void)_this;
}
void RoutingTableEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingTableEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.RoutingTableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connections_.Clear();
  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingTableEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.RoutingTableConnection connections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingTableEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.RoutingTableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_id = 1;
  if (!this->_internal_user_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .qaul.rpc.router.RoutingTableConnection connections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_connections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.RoutingTableEntry)
  return target;
}

size_t RoutingTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.RoutingTableEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.RoutingTableConnection connections = 2;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingTableEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingTableEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingTableEntry::GetClassData() const { return &_class_data_; }

void RoutingTableEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoutingTableEntry *>(to)->MergeFrom(
      static_cast<const RoutingTableEntry &>(from));
}


void RoutingTableEntry::MergeFrom(const RoutingTableEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.RoutingTableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connections_.MergeFrom(from.connections_);
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingTableEntry::CopyFrom(const RoutingTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.RoutingTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingTableEntry::IsInitialized() const {
  return true;
}

void RoutingTableEntry::InternalSwap(RoutingTableEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  connections_.InternalSwap(&other->connections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingTableEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[3]);
}

// ===================================================================

class RoutingTableConnection::_Internal {
 public:
};

RoutingTableConnection::RoutingTableConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.RoutingTableConnection)
}
RoutingTableConnection::RoutingTableConnection(const RoutingTableConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  via_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_via().empty()) {
    via_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_via(), 
      GetArenaForAllocation());
  }
  ::memcpy(&module_, &from.module_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtt_) -
    reinterpret_cast<char*>(&module_)) + sizeof(rtt_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.RoutingTableConnection)
}

inline void RoutingTableConnection::SharedCtor() {
via_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&module_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtt_) -
    reinterpret_cast<char*>(&module_)) + sizeof(rtt_));
}

RoutingTableConnection::~RoutingTableConnection() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.RoutingTableConnection)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoutingTableConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  via_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoutingTableConnection::ArenaDtor(void* object) {
  RoutingTableConnection* _this = reinterpret_cast< RoutingTableConnection* >(object);
  (void)_this;
}
void RoutingTableConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingTableConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingTableConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.RoutingTableConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  via_.ClearToEmpty();
  ::memset(&module_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtt_) -
      reinterpret_cast<char*>(&module_)) + sizeof(rtt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingTableConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .qaul.rpc.router.ConnectionModule module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_module(static_cast<::qaul::rpc::router::ConnectionModule>(val));
        } else goto handle_unusual;
        continue;
      // uint32 rtt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes via = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_via();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingTableConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.RoutingTableConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .qaul.rpc.router.ConnectionModule module = 2;
  if (this->_internal_module() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_module(), target);
  }

  // uint32 rtt = 3;
  if (this->_internal_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rtt(), target);
  }

  // bytes via = 4;
  if (!this->_internal_via().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_via(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.RoutingTableConnection)
  return target;
}

size_t RoutingTableConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.RoutingTableConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes via = 4;
  if (!this->_internal_via().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_via());
  }

  // .qaul.rpc.router.ConnectionModule module = 2;
  if (this->_internal_module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_module());
  }

  // uint32 rtt = 3;
  if (this->_internal_rtt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rtt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingTableConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingTableConnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingTableConnection::GetClassData() const { return &_class_data_; }

void RoutingTableConnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RoutingTableConnection *>(to)->MergeFrom(
      static_cast<const RoutingTableConnection &>(from));
}


void RoutingTableConnection::MergeFrom(const RoutingTableConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.RoutingTableConnection)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_via().empty()) {
    _internal_set_via(from._internal_via());
  }
  if (from._internal_module() != 0) {
    _internal_set_module(from._internal_module());
  }
  if (from._internal_rtt() != 0) {
    _internal_set_rtt(from._internal_rtt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingTableConnection::CopyFrom(const RoutingTableConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.RoutingTableConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingTableConnection::IsInitialized() const {
  return true;
}

void RoutingTableConnection::InternalSwap(RoutingTableConnection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &via_, GetArenaForAllocation(),
      &other->via_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingTableConnection, rtt_)
      + sizeof(RoutingTableConnection::rtt_)
      - PROTOBUF_FIELD_OFFSET(RoutingTableConnection, module_)>(
          reinterpret_cast<char*>(&module_),
          reinterpret_cast<char*>(&other->module_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingTableConnection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[4]);
}

// ===================================================================

class ConnectionsRequest::_Internal {
 public:
};

ConnectionsRequest::ConnectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.ConnectionsRequest)
}
ConnectionsRequest::ConnectionsRequest(const ConnectionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.ConnectionsRequest)
}

inline void ConnectionsRequest::SharedCtor() {
}

ConnectionsRequest::~ConnectionsRequest() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.ConnectionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectionsRequest::ArenaDtor(void* object) {
  ConnectionsRequest* _this = reinterpret_cast< ConnectionsRequest* >(object);
  (void)_this;
}
void ConnectionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.ConnectionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.ConnectionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.ConnectionsRequest)
  return target;
}

size_t ConnectionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.ConnectionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionsRequest::GetClassData() const { return &_class_data_; }

void ConnectionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConnectionsRequest *>(to)->MergeFrom(
      static_cast<const ConnectionsRequest &>(from));
}


void ConnectionsRequest::MergeFrom(const ConnectionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.ConnectionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionsRequest::CopyFrom(const ConnectionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.ConnectionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionsRequest::IsInitialized() const {
  return true;
}

void ConnectionsRequest::InternalSwap(ConnectionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[5]);
}

// ===================================================================

class ConnectionsList::_Internal {
 public:
};

ConnectionsList::ConnectionsList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lan_(arena),
  internet_(arena),
  ble_(arena),
  local_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.ConnectionsList)
}
ConnectionsList::ConnectionsList(const ConnectionsList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lan_(from.lan_),
      internet_(from.internet_),
      ble_(from.ble_),
      local_(from.local_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.ConnectionsList)
}

inline void ConnectionsList::SharedCtor() {
}

ConnectionsList::~ConnectionsList() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.ConnectionsList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectionsList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectionsList::ArenaDtor(void* object) {
  ConnectionsList* _this = reinterpret_cast< ConnectionsList* >(object);
  (void)_this;
}
void ConnectionsList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionsList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionsList::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.ConnectionsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lan_.Clear();
  internet_.Clear();
  ble_.Clear();
  local_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionsList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.rpc.router.ConnectionsUserEntry lan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.ConnectionsUserEntry internet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.ConnectionsUserEntry ble = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ble(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.ConnectionsUserEntry local = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_local(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionsList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.ConnectionsList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.ConnectionsUserEntry lan = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lan_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lan(i), target, stream);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry internet = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_internet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_internet(i), target, stream);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry ble = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ble_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ble(i), target, stream);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry local = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_local_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_local(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.ConnectionsList)
  return target;
}

size_t ConnectionsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.ConnectionsList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.ConnectionsUserEntry lan = 1;
  total_size += 1UL * this->_internal_lan_size();
  for (const auto& msg : this->lan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry internet = 2;
  total_size += 1UL * this->_internal_internet_size();
  for (const auto& msg : this->internet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry ble = 3;
  total_size += 1UL * this->_internal_ble_size();
  for (const auto& msg : this->ble_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .qaul.rpc.router.ConnectionsUserEntry local = 4;
  total_size += 1UL * this->_internal_local_size();
  for (const auto& msg : this->local_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionsList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectionsList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionsList::GetClassData() const { return &_class_data_; }

void ConnectionsList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConnectionsList *>(to)->MergeFrom(
      static_cast<const ConnectionsList &>(from));
}


void ConnectionsList::MergeFrom(const ConnectionsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.ConnectionsList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lan_.MergeFrom(from.lan_);
  internet_.MergeFrom(from.internet_);
  ble_.MergeFrom(from.ble_);
  local_.MergeFrom(from.local_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionsList::CopyFrom(const ConnectionsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.ConnectionsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionsList::IsInitialized() const {
  return true;
}

void ConnectionsList::InternalSwap(ConnectionsList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lan_.InternalSwap(&other->lan_);
  internet_.InternalSwap(&other->internet_);
  ble_.InternalSwap(&other->ble_);
  local_.InternalSwap(&other->local_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionsList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[6]);
}

// ===================================================================

class ConnectionsUserEntry::_Internal {
 public:
};

ConnectionsUserEntry::ConnectionsUserEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  connections_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.ConnectionsUserEntry)
}
ConnectionsUserEntry::ConnectionsUserEntry(const ConnectionsUserEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.ConnectionsUserEntry)
}

inline void ConnectionsUserEntry::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConnectionsUserEntry::~ConnectionsUserEntry() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.ConnectionsUserEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectionsUserEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectionsUserEntry::ArenaDtor(void* object) {
  ConnectionsUserEntry* _this = reinterpret_cast< ConnectionsUserEntry* >(object);
  (void)_this;
}
void ConnectionsUserEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionsUserEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionsUserEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.ConnectionsUserEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connections_.Clear();
  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionsUserEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.ConnectionEntry connections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionsUserEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.ConnectionsUserEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_id = 1;
  if (!this->_internal_user_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .qaul.rpc.router.ConnectionEntry connections = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_connections(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.ConnectionsUserEntry)
  return target;
}

size_t ConnectionsUserEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.ConnectionsUserEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.ConnectionEntry connections = 2;
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionsUserEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectionsUserEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionsUserEntry::GetClassData() const { return &_class_data_; }

void ConnectionsUserEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConnectionsUserEntry *>(to)->MergeFrom(
      static_cast<const ConnectionsUserEntry &>(from));
}


void ConnectionsUserEntry::MergeFrom(const ConnectionsUserEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.ConnectionsUserEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connections_.MergeFrom(from.connections_);
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionsUserEntry::CopyFrom(const ConnectionsUserEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.ConnectionsUserEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionsUserEntry::IsInitialized() const {
  return true;
}

void ConnectionsUserEntry::InternalSwap(ConnectionsUserEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  connections_.InternalSwap(&other->connections_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionsUserEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[7]);
}

// ===================================================================

class ConnectionEntry::_Internal {
 public:
};

ConnectionEntry::ConnectionEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.ConnectionEntry)
}
ConnectionEntry::ConnectionEntry(const ConnectionEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  via_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_via().empty()) {
    via_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_via(), 
      GetArenaForAllocation());
  }
  ::memcpy(&rtt_, &from.rtt_,
    static_cast<size_t>(reinterpret_cast<char*>(&hop_count_) -
    reinterpret_cast<char*>(&rtt_)) + sizeof(hop_count_));
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.ConnectionEntry)
}

inline void ConnectionEntry::SharedCtor() {
via_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rtt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hop_count_) -
    reinterpret_cast<char*>(&rtt_)) + sizeof(hop_count_));
}

ConnectionEntry::~ConnectionEntry() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.ConnectionEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectionEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  via_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectionEntry::ArenaDtor(void* object) {
  ConnectionEntry* _this = reinterpret_cast< ConnectionEntry* >(object);
  (void)_this;
}
void ConnectionEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.ConnectionEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  via_.ClearToEmpty();
  ::memset(&rtt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hop_count_) -
      reinterpret_cast<char*>(&rtt_)) + sizeof(hop_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rtt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hop_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes via = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_via();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.ConnectionEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rtt = 1;
  if (this->_internal_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rtt(), target);
  }

  // uint32 hop_count = 2;
  if (this->_internal_hop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hop_count(), target);
  }

  // bytes via = 3;
  if (!this->_internal_via().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_via(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.ConnectionEntry)
  return target;
}

size_t ConnectionEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.ConnectionEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes via = 3;
  if (!this->_internal_via().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_via());
  }

  // uint32 rtt = 1;
  if (this->_internal_rtt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rtt());
  }

  // uint32 hop_count = 2;
  if (this->_internal_hop_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hop_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectionEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionEntry::GetClassData() const { return &_class_data_; }

void ConnectionEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConnectionEntry *>(to)->MergeFrom(
      static_cast<const ConnectionEntry &>(from));
}


void ConnectionEntry::MergeFrom(const ConnectionEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.ConnectionEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_via().empty()) {
    _internal_set_via(from._internal_via());
  }
  if (from._internal_rtt() != 0) {
    _internal_set_rtt(from._internal_rtt());
  }
  if (from._internal_hop_count() != 0) {
    _internal_set_hop_count(from._internal_hop_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionEntry::CopyFrom(const ConnectionEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.ConnectionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionEntry::IsInitialized() const {
  return true;
}

void ConnectionEntry::InternalSwap(ConnectionEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &via_, GetArenaForAllocation(),
      &other->via_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionEntry, hop_count_)
      + sizeof(ConnectionEntry::hop_count_)
      - PROTOBUF_FIELD_OFFSET(ConnectionEntry, rtt_)>(
          reinterpret_cast<char*>(&rtt_),
          reinterpret_cast<char*>(&other->rtt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[8]);
}

// ===================================================================

class NeighboursRequest::_Internal {
 public:
};

NeighboursRequest::NeighboursRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.NeighboursRequest)
}
NeighboursRequest::NeighboursRequest(const NeighboursRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.NeighboursRequest)
}

inline void NeighboursRequest::SharedCtor() {
}

NeighboursRequest::~NeighboursRequest() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.NeighboursRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NeighboursRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NeighboursRequest::ArenaDtor(void* object) {
  NeighboursRequest* _this = reinterpret_cast< NeighboursRequest* >(object);
  (void)_this;
}
void NeighboursRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NeighboursRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NeighboursRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.NeighboursRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeighboursRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NeighboursRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.NeighboursRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.NeighboursRequest)
  return target;
}

size_t NeighboursRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.NeighboursRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NeighboursRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NeighboursRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NeighboursRequest::GetClassData() const { return &_class_data_; }

void NeighboursRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NeighboursRequest *>(to)->MergeFrom(
      static_cast<const NeighboursRequest &>(from));
}


void NeighboursRequest::MergeFrom(const NeighboursRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.NeighboursRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NeighboursRequest::CopyFrom(const NeighboursRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.NeighboursRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighboursRequest::IsInitialized() const {
  return true;
}

void NeighboursRequest::InternalSwap(NeighboursRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NeighboursRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[9]);
}

// ===================================================================

class NeighboursList::_Internal {
 public:
};

NeighboursList::NeighboursList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lan_(arena),
  internet_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.NeighboursList)
}
NeighboursList::NeighboursList(const NeighboursList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lan_(from.lan_),
      internet_(from.internet_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.NeighboursList)
}

inline void NeighboursList::SharedCtor() {
}

NeighboursList::~NeighboursList() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.NeighboursList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NeighboursList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NeighboursList::ArenaDtor(void* object) {
  NeighboursList* _this = reinterpret_cast< NeighboursList* >(object);
  (void)_this;
}
void NeighboursList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NeighboursList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NeighboursList::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.NeighboursList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lan_.Clear();
  internet_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeighboursList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .qaul.rpc.router.NeighboursEntry lan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .qaul.rpc.router.NeighboursEntry internet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NeighboursList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.NeighboursList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.NeighboursEntry lan = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lan_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lan(i), target, stream);
  }

  // repeated .qaul.rpc.router.NeighboursEntry internet = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_internet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_internet(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.NeighboursList)
  return target;
}

size_t NeighboursList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.NeighboursList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .qaul.rpc.router.NeighboursEntry lan = 1;
  total_size += 1UL * this->_internal_lan_size();
  for (const auto& msg : this->lan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .qaul.rpc.router.NeighboursEntry internet = 2;
  total_size += 1UL * this->_internal_internet_size();
  for (const auto& msg : this->internet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NeighboursList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NeighboursList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NeighboursList::GetClassData() const { return &_class_data_; }

void NeighboursList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NeighboursList *>(to)->MergeFrom(
      static_cast<const NeighboursList &>(from));
}


void NeighboursList::MergeFrom(const NeighboursList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.NeighboursList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lan_.MergeFrom(from.lan_);
  internet_.MergeFrom(from.internet_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NeighboursList::CopyFrom(const NeighboursList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.NeighboursList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighboursList::IsInitialized() const {
  return true;
}

void NeighboursList::InternalSwap(NeighboursList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lan_.InternalSwap(&other->lan_);
  internet_.InternalSwap(&other->internet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NeighboursList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[10]);
}

// ===================================================================

class NeighboursEntry::_Internal {
 public:
};

NeighboursEntry::NeighboursEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:qaul.rpc.router.NeighboursEntry)
}
NeighboursEntry::NeighboursEntry(const NeighboursEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  rtt_ = from.rtt_;
  // @@protoc_insertion_point(copy_constructor:qaul.rpc.router.NeighboursEntry)
}

inline void NeighboursEntry::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rtt_ = 0u;
}

NeighboursEntry::~NeighboursEntry() {
  // @@protoc_insertion_point(destructor:qaul.rpc.router.NeighboursEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NeighboursEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NeighboursEntry::ArenaDtor(void* object) {
  NeighboursEntry* _this = reinterpret_cast< NeighboursEntry* >(object);
  (void)_this;
}
void NeighboursEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NeighboursEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NeighboursEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:qaul.rpc.router.NeighboursEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  rtt_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeighboursEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rtt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NeighboursEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qaul.rpc.router.NeighboursEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // uint32 rtt = 2;
  if (this->_internal_rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qaul.rpc.router.NeighboursEntry)
  return target;
}

size_t NeighboursEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qaul.rpc.router.NeighboursEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node_id = 1;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_id());
  }

  // uint32 rtt = 2;
  if (this->_internal_rtt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rtt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NeighboursEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NeighboursEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NeighboursEntry::GetClassData() const { return &_class_data_; }

void NeighboursEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NeighboursEntry *>(to)->MergeFrom(
      static_cast<const NeighboursEntry &>(from));
}


void NeighboursEntry::MergeFrom(const NeighboursEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qaul.rpc.router.NeighboursEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_rtt() != 0) {
    _internal_set_rtt(from._internal_rtt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NeighboursEntry::CopyFrom(const NeighboursEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qaul.rpc.router.NeighboursEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighboursEntry::IsInitialized() const {
  return true;
}

void NeighboursEntry::InternalSwap(NeighboursEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
  swap(rtt_, other->rtt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NeighboursEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_router_2frouter_2eproto_getter, &descriptor_table_router_2frouter_2eproto_once,
      file_level_metadata_router_2frouter_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace router
}  // namespace rpc
}  // namespace qaul
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::Router* Arena::CreateMaybeMessage< ::qaul::rpc::router::Router >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::Router >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::RoutingTableRequest* Arena::CreateMaybeMessage< ::qaul::rpc::router::RoutingTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::RoutingTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::RoutingTableList* Arena::CreateMaybeMessage< ::qaul::rpc::router::RoutingTableList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::RoutingTableList >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::RoutingTableEntry* Arena::CreateMaybeMessage< ::qaul::rpc::router::RoutingTableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::RoutingTableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::RoutingTableConnection* Arena::CreateMaybeMessage< ::qaul::rpc::router::RoutingTableConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::RoutingTableConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::ConnectionsRequest* Arena::CreateMaybeMessage< ::qaul::rpc::router::ConnectionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::ConnectionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::ConnectionsList* Arena::CreateMaybeMessage< ::qaul::rpc::router::ConnectionsList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::ConnectionsList >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::ConnectionsUserEntry* Arena::CreateMaybeMessage< ::qaul::rpc::router::ConnectionsUserEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::ConnectionsUserEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::ConnectionEntry* Arena::CreateMaybeMessage< ::qaul::rpc::router::ConnectionEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::ConnectionEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::NeighboursRequest* Arena::CreateMaybeMessage< ::qaul::rpc::router::NeighboursRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::NeighboursRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::NeighboursList* Arena::CreateMaybeMessage< ::qaul::rpc::router::NeighboursList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::NeighboursList >(arena);
}
template<> PROTOBUF_NOINLINE ::qaul::rpc::router::NeighboursEntry* Arena::CreateMaybeMessage< ::qaul::rpc::router::NeighboursEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::qaul::rpc::router::NeighboursEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
