//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: rpc/debug.proto

package qaul.rpc.debug;

@kotlin.jvm.JvmSynthetic
public inline fun debug(block: qaul.rpc.debug.DebugKt.Dsl.() -> kotlin.Unit): qaul.rpc.debug.DebugOuterClass.Debug =
  qaul.rpc.debug.DebugKt.Dsl._create(qaul.rpc.debug.DebugOuterClass.Debug.newBuilder()).apply { block() }._build()
public object DebugKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: qaul.rpc.debug.DebugOuterClass.Debug.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.rpc.debug.DebugOuterClass.Debug.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.rpc.debug.DebugOuterClass.Debug = _builder.build()

    /**
     * <pre>
     * request a heartbeat
     * </pre>
     *
     * <code>.qaul.rpc.debug.HeartbeatRequest heartbeat_request = 1;</code>
     */
    public var heartbeatRequest: qaul.rpc.debug.DebugOuterClass.HeartbeatRequest
      @JvmName("getHeartbeatRequest")
      get() = _builder.getHeartbeatRequest()
      @JvmName("setHeartbeatRequest")
      set(value) {
        _builder.setHeartbeatRequest(value)
      }
    /**
     * <pre>
     * request a heartbeat
     * </pre>
     *
     * <code>.qaul.rpc.debug.HeartbeatRequest heartbeat_request = 1;</code>
     */
    public fun clearHeartbeatRequest() {
      _builder.clearHeartbeatRequest()
    }
    /**
     * <pre>
     * request a heartbeat
     * </pre>
     *
     * <code>.qaul.rpc.debug.HeartbeatRequest heartbeat_request = 1;</code>
     * @return Whether the heartbeatRequest field is set.
     */
    public fun hasHeartbeatRequest(): kotlin.Boolean {
      return _builder.hasHeartbeatRequest()
    }

    /**
     * <pre>
     * response to the heartbeat request
     * </pre>
     *
     * <code>.qaul.rpc.debug.HeartbeatResponse heartbeat_response = 2;</code>
     */
    public var heartbeatResponse: qaul.rpc.debug.DebugOuterClass.HeartbeatResponse
      @JvmName("getHeartbeatResponse")
      get() = _builder.getHeartbeatResponse()
      @JvmName("setHeartbeatResponse")
      set(value) {
        _builder.setHeartbeatResponse(value)
      }
    /**
     * <pre>
     * response to the heartbeat request
     * </pre>
     *
     * <code>.qaul.rpc.debug.HeartbeatResponse heartbeat_response = 2;</code>
     */
    public fun clearHeartbeatResponse() {
      _builder.clearHeartbeatResponse()
    }
    /**
     * <pre>
     * response to the heartbeat request
     * </pre>
     *
     * <code>.qaul.rpc.debug.HeartbeatResponse heartbeat_response = 2;</code>
     * @return Whether the heartbeatResponse field is set.
     */
    public fun hasHeartbeatResponse(): kotlin.Boolean {
      return _builder.hasHeartbeatResponse()
    }

    /**
     * <pre>
     * libqaul panics immediatly
     * </pre>
     *
     * <code>.qaul.rpc.debug.Panic panic = 3;</code>
     */
    public var panic: qaul.rpc.debug.DebugOuterClass.Panic
      @JvmName("getPanic")
      get() = _builder.getPanic()
      @JvmName("setPanic")
      set(value) {
        _builder.setPanic(value)
      }
    /**
     * <pre>
     * libqaul panics immediatly
     * </pre>
     *
     * <code>.qaul.rpc.debug.Panic panic = 3;</code>
     */
    public fun clearPanic() {
      _builder.clearPanic()
    }
    /**
     * <pre>
     * libqaul panics immediatly
     * </pre>
     *
     * <code>.qaul.rpc.debug.Panic panic = 3;</code>
     * @return Whether the panic field is set.
     */
    public fun hasPanic(): kotlin.Boolean {
      return _builder.hasPanic()
    }
    public val messageCase: qaul.rpc.debug.DebugOuterClass.Debug.MessageCase
      @JvmName("getMessageCase")
      get() = _builder.getMessageCase()

    public fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun qaul.rpc.debug.DebugOuterClass.Debug.copy(block: qaul.rpc.debug.DebugKt.Dsl.() -> kotlin.Unit): qaul.rpc.debug.DebugOuterClass.Debug =
  qaul.rpc.debug.DebugKt.Dsl._create(this.toBuilder()).apply { block() }._build()
