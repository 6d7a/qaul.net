//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: services/filesharing/filesharing_rpc.proto

package qaul.rpc.filesharing;

@kotlin.jvm.JvmName("-initializefileHistoryRequest")
inline fun fileHistoryRequest(block: qaul.rpc.filesharing.FileHistoryRequestKt.Dsl.() -> kotlin.Unit): qaul.rpc.filesharing.FilesharingRpc.FileHistoryRequest =
  qaul.rpc.filesharing.FileHistoryRequestKt.Dsl._create(qaul.rpc.filesharing.FilesharingRpc.FileHistoryRequest.newBuilder()).apply { block() }._build()
object FileHistoryRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: qaul.rpc.filesharing.FilesharingRpc.FileHistoryRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.rpc.filesharing.FilesharingRpc.FileHistoryRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.rpc.filesharing.FilesharingRpc.FileHistoryRequest = _builder.build()

    /**
     * <pre>
     * offset
     * </pre>
     *
     * <code>uint32 offset = 1;</code>
     */
    var offset: kotlin.Int
      @JvmName("getOffset")
      get() = _builder.getOffset()
      @JvmName("setOffset")
      set(value) {
        _builder.setOffset(value)
      }
    /**
     * <pre>
     * offset
     * </pre>
     *
     * <code>uint32 offset = 1;</code>
     */
    fun clearOffset() {
      _builder.clearOffset()
    }

    /**
     * <pre>
     * limit
     * </pre>
     *
     * <code>uint32 limit = 2;</code>
     */
    var limit: kotlin.Int
      @JvmName("getLimit")
      get() = _builder.getLimit()
      @JvmName("setLimit")
      set(value) {
        _builder.setLimit(value)
      }
    /**
     * <pre>
     * limit
     * </pre>
     *
     * <code>uint32 limit = 2;</code>
     */
    fun clearLimit() {
      _builder.clearLimit()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.rpc.filesharing.FilesharingRpc.FileHistoryRequest.copy(block: qaul.rpc.filesharing.FileHistoryRequestKt.Dsl.() -> kotlin.Unit): qaul.rpc.filesharing.FilesharingRpc.FileHistoryRequest =
  qaul.rpc.filesharing.FileHistoryRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

