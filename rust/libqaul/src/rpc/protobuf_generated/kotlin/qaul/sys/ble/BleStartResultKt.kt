//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: connections/ble/manager/ble.proto

package qaul.sys.ble;

@kotlin.jvm.JvmSynthetic
inline fun bleStartResult(block: qaul.sys.ble.BleStartResultKt.Dsl.() -> Unit): qaul.sys.ble.BleOuterClass.BleStartResult =
  qaul.sys.ble.BleStartResultKt.Dsl._create(qaul.sys.ble.BleOuterClass.BleStartResult.newBuilder()).apply { block() }._build()
object BleStartResultKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: qaul.sys.ble.BleOuterClass.BleStartResult.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.sys.ble.BleOuterClass.BleStartResult.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.sys.ble.BleOuterClass.BleStartResult = _builder.build()

    /**
     * <pre>
     * whether the start of the device was a success or not
     * </pre>
     *
     * <code>bool success = 1;</code>
     */
    var success: kotlin.Boolean
      @JvmName("getSuccess")
      get() = _builder.getSuccess()
      @JvmName("setSuccess")
      set(value) {
        _builder.setSuccess(value)
      }
    /**
     * <pre>
     * whether the start of the device was a success or not
     * </pre>
     *
     * <code>bool success = 1;</code>
     */
    fun clearSuccess() {
      _builder.clearSuccess()
    }

    /**
     * <pre>
     * error message
     * </pre>
     *
     * <code>string error_message = 2;</code>
     */
    var errorMessage: kotlin.String
      @JvmName("getErrorMessage")
      get() = _builder.getErrorMessage()
      @JvmName("setErrorMessage")
      set(value) {
        _builder.setErrorMessage(value)
      }
    /**
     * <pre>
     * error message
     * </pre>
     *
     * <code>string error_message = 2;</code>
     */
    fun clearErrorMessage() {
      _builder.clearErrorMessage()
    }

    /**
     * <pre>
     * error reasons
     * </pre>
     *
     * <code>bool unknonw_error = 3;</code>
     */
    var unknonwError: kotlin.Boolean
      @JvmName("getUnknonwError")
      get() = _builder.getUnknonwError()
      @JvmName("setUnknonwError")
      set(value) {
        _builder.setUnknonwError(value)
      }
    /**
     * <pre>
     * error reasons
     * </pre>
     *
     * <code>bool unknonw_error = 3;</code>
     */
    fun clearUnknonwError() {
      _builder.clearUnknonwError()
    }

    /**
     * <pre>
     * rights not provided
     * </pre>
     *
     * <code>bool no_rights = 4;</code>
     */
    var noRights: kotlin.Boolean
      @JvmName("getNoRights")
      get() = _builder.getNoRights()
      @JvmName("setNoRights")
      set(value) {
        _builder.setNoRights(value)
      }
    /**
     * <pre>
     * rights not provided
     * </pre>
     *
     * <code>bool no_rights = 4;</code>
     */
    fun clearNoRights() {
      _builder.clearNoRights()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.sys.ble.BleOuterClass.BleStartResult.copy(block: qaul.sys.ble.BleStartResultKt.Dsl.() -> Unit): qaul.sys.ble.BleOuterClass.BleStartResult =
  qaul.sys.ble.BleStartResultKt.Dsl._create(this.toBuilder()).apply { block() }._build()
