//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: connections/ble/manager/ble.proto

package qaul.sys.ble;

@kotlin.jvm.JvmSynthetic
inline fun bleDeviceInfo(block: qaul.sys.ble.BleDeviceInfoKt.Dsl.() -> Unit): qaul.sys.ble.BleOuterClass.BleDeviceInfo =
  qaul.sys.ble.BleDeviceInfoKt.Dsl._create(qaul.sys.ble.BleOuterClass.BleDeviceInfo.newBuilder()).apply { block() }._build()
object BleDeviceInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: qaul.sys.ble.BleOuterClass.BleDeviceInfo.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: qaul.sys.ble.BleOuterClass.BleDeviceInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): qaul.sys.ble.BleOuterClass.BleDeviceInfo = _builder.build()

    /**
     * <pre>
     * Bluetooth device address
     * 48 bit unique Bluetooth device addr
     * e.g. 80:86:F2:08:C7:98
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * Bluetooth device address
     * 48 bit unique Bluetooth device addr
     * e.g. 80:86:F2:08:C7:98
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    fun clearId() {
      _builder.clearId()
    }

    /**
     * <pre>
     * vendor name, device name, etc
     * this is field is purely informative
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * vendor name, device name, etc
     * this is field is purely informative
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    fun clearName() {
      _builder.clearName()
    }

    /**
     * <pre>
     * device powered on
     * </pre>
     *
     * <code>bool powered = 3;</code>
     */
    var powered: kotlin.Boolean
      @JvmName("getPowered")
      get() = _builder.getPowered()
      @JvmName("setPowered")
      set(value) {
        _builder.setPowered(value)
      }
    /**
     * <pre>
     * device powered on
     * </pre>
     *
     * <code>bool powered = 3;</code>
     */
    fun clearPowered() {
      _builder.clearPowered()
    }

    /**
     * <pre>
     * BLE advertising features supported
     * This field informs us if the basic necessities for 
     * qaul BLE requirements are supportorted by
     * this device.
     * These requirements are:
     * * BLE device roles: central &amp; peripheral
     * * Send &amp; receive BLE advertisements
     * </pre>
     *
     * <code>bool ble_support = 4;</code>
     */
    var bleSupport: kotlin.Boolean
      @JvmName("getBleSupport")
      get() = _builder.getBleSupport()
      @JvmName("setBleSupport")
      set(value) {
        _builder.setBleSupport(value)
      }
    /**
     * <pre>
     * BLE advertising features supported
     * This field informs us if the basic necessities for 
     * qaul BLE requirements are supportorted by
     * this device.
     * These requirements are:
     * * BLE device roles: central &amp; peripheral
     * * Send &amp; receive BLE advertisements
     * </pre>
     *
     * <code>bool ble_support = 4;</code>
     */
    fun clearBleSupport() {
      _builder.clearBleSupport()
    }

    /**
     * <pre>
     * does it support the 251 byte advertisement messages?
     * </pre>
     *
     * <code>bool adv_251 = 7;</code>
     */
    var adv251: kotlin.Boolean
      @JvmName("getAdv251")
      get() = _builder.getAdv251()
      @JvmName("setAdv251")
      set(value) {
        _builder.setAdv251(value)
      }
    /**
     * <pre>
     * does it support the 251 byte advertisement messages?
     * </pre>
     *
     * <code>bool adv_251 = 7;</code>
     */
    fun clearAdv251() {
      _builder.clearAdv251()
    }

    /**
     * <pre>
     * is extended advertising supported
     * </pre>
     *
     * <code>bool adv_extended = 8;</code>
     */
    var advExtended: kotlin.Boolean
      @JvmName("getAdvExtended")
      get() = _builder.getAdvExtended()
      @JvmName("setAdvExtended")
      set(value) {
        _builder.setAdvExtended(value)
      }
    /**
     * <pre>
     * is extended advertising supported
     * </pre>
     *
     * <code>bool adv_extended = 8;</code>
     */
    fun clearAdvExtended() {
      _builder.clearAdvExtended()
    }

    /**
     * <pre>
     * what is the maximal amount of bytes sendable via advertising
     * </pre>
     *
     * <code>uint32 adv_extended_bytes = 9;</code>
     */
    var advExtendedBytes: kotlin.Int
      @JvmName("getAdvExtendedBytes")
      get() = _builder.getAdvExtendedBytes()
      @JvmName("setAdvExtendedBytes")
      set(value) {
        _builder.setAdvExtendedBytes(value)
      }
    /**
     * <pre>
     * what is the maximal amount of bytes sendable via advertising
     * </pre>
     *
     * <code>uint32 adv_extended_bytes = 9;</code>
     */
    fun clearAdvExtendedBytes() {
      _builder.clearAdvExtendedBytes()
    }

    /**
     * <pre>
     * the following checks for BLE 5 features
     * is extended advertising supported?
     * </pre>
     *
     * <code>bool adv_1m = 10;</code>
     */
    var adv1M: kotlin.Boolean
      @JvmName("getAdv1M")
      get() = _builder.getAdv1M()
      @JvmName("setAdv1M")
      set(value) {
        _builder.setAdv1M(value)
      }
    /**
     * <pre>
     * the following checks for BLE 5 features
     * is extended advertising supported?
     * </pre>
     *
     * <code>bool adv_1m = 10;</code>
     */
    fun clearAdv1M() {
      _builder.clearAdv1M()
    }

    /**
     * <pre>
     * is extended advertising supported with 2M phy?
     * </pre>
     *
     * <code>bool adv_2m = 11;</code>
     */
    var adv2M: kotlin.Boolean
      @JvmName("getAdv2M")
      get() = _builder.getAdv2M()
      @JvmName("setAdv2M")
      set(value) {
        _builder.setAdv2M(value)
      }
    /**
     * <pre>
     * is extended advertising supported with 2M phy?
     * </pre>
     *
     * <code>bool adv_2m = 11;</code>
     */
    fun clearAdv2M() {
      _builder.clearAdv2M()
    }

    /**
     * <pre>
     * is extended advertising supported in coded
     * mode? (For long distance connections)
     * </pre>
     *
     * <code>bool adv_coded = 12;</code>
     */
    var advCoded: kotlin.Boolean
      @JvmName("getAdvCoded")
      get() = _builder.getAdvCoded()
      @JvmName("setAdvCoded")
      set(value) {
        _builder.setAdvCoded(value)
      }
    /**
     * <pre>
     * is extended advertising supported in coded
     * mode? (For long distance connections)
     * </pre>
     *
     * <code>bool adv_coded = 12;</code>
     */
    fun clearAdvCoded() {
      _builder.clearAdvCoded()
    }

    /**
     * <pre>
     * is LE audio supported?
     * this is the most recent feature, supported by
     * android 12 and above
     * linux ?
     * ios ?
     * macos ?
     * windows ?
     * </pre>
     *
     * <code>bool le_audio = 13;</code>
     */
    var leAudio: kotlin.Boolean
      @JvmName("getLeAudio")
      get() = _builder.getLeAudio()
      @JvmName("setLeAudio")
      set(value) {
        _builder.setLeAudio(value)
      }
    /**
     * <pre>
     * is LE audio supported?
     * this is the most recent feature, supported by
     * android 12 and above
     * linux ?
     * ios ?
     * macos ?
     * windows ?
     * </pre>
     *
     * <code>bool le_audio = 13;</code>
     */
    fun clearLeAudio() {
      _builder.clearLeAudio()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun qaul.sys.ble.BleOuterClass.BleDeviceInfo.copy(block: qaul.sys.ble.BleDeviceInfoKt.Dsl.() -> Unit): qaul.sys.ble.BleOuterClass.BleDeviceInfo =
  qaul.sys.ble.BleDeviceInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()
