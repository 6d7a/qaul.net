// Copyright (c) 2021 Open Community Project Association https://ocpa.ch
// This software is published under the AGPLv3 license.

//! # RPC Debug Messages
//! 
//! Messages to debug libqaul

use prost::Message;
use super::Rpc;

/// Import protobuf message definition generated by 
/// the rust module prost-build.
pub mod proto { include!("qaul.rpc.debug.rs"); }


/// RPC Debugging Module
pub struct Debug {

}


impl Debug {
    /// Process incoming RPC request messages for debug module
    pub fn rpc(data: Vec<u8>, _user_id: Vec<u8>) {
        match proto::Debug::decode(&data[..]) {
            Ok(debug) => {
                match debug.message {
                    Some(proto::debug::Message::HeartbeatRequest(_heartbeat_request)) => {
                        // create and return heartbeat message
                        let proto_message = proto::Debug {
                            message: Some( 
                                proto::debug::Message::HeartbeatResponse(proto::HeartbeatResponse {})
                            ),
                        };

                        // encode message
                        let mut buf = Vec::with_capacity(proto_message.encoded_len());
                        proto_message.encode(&mut buf).expect("Vec<u8> provides capacity as needed");

                        // send message
                        Rpc::send_message(buf, crate::rpc::proto::Modules::Debug.into(), "".to_string(), Vec::new() );
                    },
                    Some(proto::debug::Message::Panic(_panic)) => {
                        // panic
                        log::error!("Libqaul will panic");
                        panic!("Libqaul panics for debugging reasons");
                    },
                    _ => {
                        log::error!("Unhandled RPC Debug Message");
                    },
                }
            },
            Err(e) => {
                log::error!("{:?}", e);
            },
        }
    }
}
